

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Jan 08 21:16:40 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 18/08/2023 GMT
    43                           ; 
    44                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4520 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000000                     _RCREG	set	4014
    77   000000                     _TXREG	set	4013
    78   000000                     _PIE1bits	set	3997
    79   000000                     _PIR1bits	set	3998
    80   000000                     _RCSTAbits	set	4011
    81   000000                     _SPBRG	set	4015
    82   000000                     _BAUDCONbits	set	4024
    83   000000                     _TXSTAbits	set	4012
    84   000000                     _INTCON3bits	set	4080
    85   000000                     _INTCON2bits	set	4081
    86   000000                     _INTCONbits	set	4082
    87   000000                     _ADRESL	set	4035
    88   000000                     _ADRESH	set	4036
    89   000000                     _ADCON0bits	set	4034
    90   000000                     _LATAbits	set	3977
    91   000000                     _OSCCONbits	set	4051
    92   000000                     _CREN	set	32092
    93   000000                     _RCIF	set	31989
    94   000000                     _IRCF0	set	32412
    95   000000                     _IRCF1	set	32413
    96   000000                     _PORTBbits	set	3969
    97   000000                     _LATA	set	3977
    98   000000                     _TRISA	set	3986
    99   000000                     _T2CONbits	set	4042
   100   000000                     _RCONbits	set	4048
   101   000000                     _IRCF2	set	32414
   102   000000                     _TRISCbits	set	3988
   103   000000                     _TRISBbits	set	3987
   104   000000                     _TMR2	set	4044
   105   000000                     _PR2	set	4043
   106   000000                     _IPR1bits	set	3999
   107                           
   108                           	psect	smallconst
   109   000600                     __psmallconst:
   110                           	callstack 0
   111   000600  00                 	db	0
   112   000601                     STR_4:
   113   000601  79                 	db	121	;'y'
   114   000602  6F                 	db	111	;'o'
   115   000603  75                 	db	117	;'u'
   116   000604  72                 	db	114	;'r'
   117   000605  20                 	db	32
   118   000606  73                 	db	115	;'s'
   119   000607  74                 	db	116	;'t'
   120   000608  72                 	db	114	;'r'
   121   000609  69                 	db	105	;'i'
   122   00060A  6E                 	db	110	;'n'
   123   00060B  67                 	db	103	;'g'
   124   00060C  20                 	db	32
   125   00060D  69                 	db	105	;'i'
   126   00060E  73                 	db	115	;'s'
   127   00060F  20                 	db	32
   128   000610  3A                 	db	58	;':'
   129   000611  20                 	db	32
   130   000612  00                 	db	0
   131   000613                     STR_2:
   132   000613  73                 	db	115	;'s'
   133   000614  74                 	db	116	;'t'
   134   000615  61                 	db	97	;'a'
   135   000616  74                 	db	116	;'t'
   136   000617  65                 	db	101	;'e'
   137   000618  20                 	db	32
   138   000619  3D                 	db	61	;'='
   139   00061A  20                 	db	32
   140   00061B  31                 	db	49	;'1'
   141   00061C  00                 	db	0
   142   00061D                     STR_1:
   143   00061D  69                 	db	105	;'i'
   144   00061E  6E                 	db	110	;'n'
   145   00061F  74                 	db	116	;'t'
   146   000620  65                 	db	101	;'e'
   147   000621  72                 	db	114	;'r'
   148   000622  72                 	db	114	;'r'
   149   000623  75                 	db	117	;'u'
   150   000624  70                 	db	112	;'p'
   151   000625  74                 	db	116	;'t'
   152   000626  00                 	db	0
   153   000627                     STR_3:
   154   000627  69                 	db	105	;'i'
   155   000628  20                 	db	32
   156   000629  3D                 	db	61	;'='
   157   00062A  20                 	db	32
   158   00062B  00                 	db	0
   159   00062C                     STR_5:
   160   00062C  0D                 	db	13
   161   00062D  0A                 	db	10
   162   00062E  0A                 	db	10
   163   00062F  00                 	db	0
   164   000630  00                 	db	0	; dummy byte at the end
   165   000000                     
   166                           ; #config settings
   167                           
   168                           	psect	cinit
   169   00144E                     __pcinit:
   170                           	callstack 0
   171   00144E                     start_initialization:
   172                           	callstack 0
   173   00144E                     __initialization:
   174                           	callstack 0
   175                           
   176                           ; Clear objects allocated to BANK0 (60 bytes)
   177   00144E  EE00  F080         	lfsr	0,__pbssBANK0
   178   001452  0E3C               	movlw	60
   179   001454                     clear_0:
   180   001454  6AEE               	clrf	postinc0,c
   181   001456  06E8               	decf	wreg,f,c
   182   001458  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to COMRAM (28 bytes)
   185   00145A  EE00  F037         	lfsr	0,__pbssCOMRAM
   186   00145E  0E1C               	movlw	28
   187   001460                     clear_1:
   188   001460  6AEE               	clrf	postinc0,c
   189   001462  06E8               	decf	wreg,f,c
   190   001464  E1FD               	bnz	clear_1
   191   001466                     end_of_initialization:
   192                           	callstack 0
   193   001466                     __end_of__initialization:
   194                           	callstack 0
   195   001466  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   196   001468  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   197   00146A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   198   00146C  6EF8               	movwf	tblptru,c
   199   00146E  0100               	movlb	0
   200   001470  EF67  F008         	goto	_main	;jump to C main() function
   201                           
   202                           	psect	bssCOMRAM
   203   000037                     __pbssCOMRAM:
   204                           	callstack 0
   205   000037                     _complete:
   206                           	callstack 0
   207   000037                     	ds	2
   208   000039                     _input_complete:
   209                           	callstack 0
   210   000039                     	ds	2
   211   00003B                     _lenStr:
   212                           	callstack 0
   213   00003B                     	ds	2
   214   00003D                     _state:
   215                           	callstack 0
   216   00003D                     	ds	2
   217   00003F                     _mystring:
   218                           	callstack 0
   219   00003F                     	ds	20
   220                           
   221                           	psect	bssBANK0
   222   000080                     __pbssBANK0:
   223                           	callstack 0
   224   000080                     _input_string:
   225                           	callstack 0
   226   000080                     	ds	20
   227   000094                     _str:
   228                           	callstack 0
   229   000094                     	ds	20
   230   0000A8                     _string:
   231                           	callstack 0
   232   0000A8                     	ds	20
   233                           
   234                           	psect	cstackBANK0
   235   0000BC                     __pcstackBANK0:
   236                           	callstack 0
   237   0000BC                     alphabet_to_code@c:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x0
   241   0000BC                     	ds	1
   242   0000BD                     alphabet_to_code@rv:
   243                           	callstack 0
   244                           
   245                           ; 4 bytes @ 0x1
   246   0000BD                     	ds	4
   247   0000C1                     bee_led_output@in:
   248                           	callstack 0
   249                           
   250                           ; 4 bytes @ 0x5
   251   0000C1                     	ds	4
   252   0000C5                     bee_led_output@mask:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x9
   256   0000C5                     	ds	2
   257   0000C7                     bee_led_output@signal:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0xB
   261   0000C7                     	ds	2
   262   0000C9                     bee_led_output@code:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0xD
   266   0000C9                     	ds	2
   267   0000CB                     bee_led_output@count:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0xF
   271   0000CB                     	ds	2
   272   0000CD                     bee_led_output@i:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x11
   276   0000CD                     	ds	2
   277   0000CF                     
   278                           ; 1 bytes @ 0x13
   279   0000CF                     	ds	1
   280   0000D0                     output@i:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x14
   284   0000D0                     	ds	2
   285   0000D2                     main@check:
   286                           	callstack 0
   287                           
   288                           ; 1 bytes @ 0x16
   289   0000D2                     	ds	1
   290                           
   291                           	psect	cstackCOMRAM
   292   000001                     __pcstackCOMRAM:
   293                           	callstack 0
   294   000001                     i2UART_Write@data:
   295                           	callstack 0
   296   000001                     code_to_alphabet@mc:
   297                           	callstack 0
   298                           
   299                           ; 4 bytes @ 0x0
   300   000001                     	ds	1
   301   000002                     i2UART_Write_Text@text:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x1
   305   000002                     	ds	2
   306   000004                     ??i2_UART_Write_Text:
   307                           
   308                           ; 1 bytes @ 0x3
   309   000004                     	ds	1
   310   000005                     ??_code_to_alphabet:
   311                           
   312                           ; 1 bytes @ 0x4
   313   000005                     	ds	1
   314   000006                     i2UART_Write_Text@i:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0x5
   318   000006                     	ds	1
   319   000007                     code_to_alphabet@rc:
   320                           	callstack 0
   321                           
   322                           ; 1 bytes @ 0x6
   323   000007                     	ds	1
   324   000008                     state1_output@input_code:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x7
   328   000008                     	ds	2
   329   00000A                     state1_output@input_count:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x9
   333   00000A                     	ds	2
   334   00000C                     state1_output@a:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0xB
   338   00000C                     	ds	1
   339   00000D                     state1_output@mc:
   340                           	callstack 0
   341                           
   342                           ; 4 bytes @ 0xC
   343   00000D                     	ds	4
   344   000011                     ??_H_ISR:
   345                           
   346                           ; 1 bytes @ 0x10
   347   000011                     	ds	8
   348   000019                     H_ISR@input_count:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x18
   352   000019                     	ds	2
   353   00001B                     H_ISR@i:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x1A
   357   00001B                     	ds	2
   358   00001D                     H_ISR@i_1165:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x1C
   362   00001D                     	ds	2
   363   00001F                     H_ISR@input_code:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x1E
   367   00001F                     	ds	2
   368   000021                     H_ISR@clock:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x20
   372   000021                     	ds	2
   373   000023                     i1UART_Write@data:
   374                           	callstack 0
   375   000023                     i1ClearBuffer@i:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x22
   379   000023                     	ds	2
   380   000025                     
   381                           ; 1 bytes @ 0x24
   382   000025                     	ds	1
   383   000026                     ??_Lo_ISR:
   384                           
   385                           ; 1 bytes @ 0x25
   386   000026                     	ds	7
   387   00002D                     ?_Get_complete_state:
   388                           	callstack 0
   389   00002D                     ?_alphabet_to_code:
   390                           	callstack 0
   391   00002D                     UART_Write@data:
   392                           	callstack 0
   393   00002D                     ClearBuffer@i:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x2C
   397   00002D                     	ds	1
   398   00002E                     UART_Write_Text@text:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x2D
   402   00002E                     	ds	1
   403   00002F                     strcpy@dest:
   404                           	callstack 0
   405                           
   406                           ; 1 bytes @ 0x2E
   407   00002F                     	ds	1
   408   000030                     ??_UART_Write_Text:
   409   000030                     strcpy@src:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x2F
   413   000030                     	ds	1
   414   000031                     ??_alphabet_to_code:
   415   000031                     strcpy@d:
   416                           	callstack 0
   417                           
   418                           ; 1 bytes @ 0x30
   419   000031                     	ds	1
   420   000032                     UART_Write_Text@i:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x31
   424   000032                     	ds	2
   425   000034                     ??_bee_led_output:
   426                           
   427                           ; 1 bytes @ 0x33
   428   000034                     	ds	3
   429   000037                     
   430                           ; 1 bytes @ 0x36
   431 ;;
   432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   433 ;;
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 353 in file "main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;  check           1   22[BANK0 ] PTR unsigned char 
   441 ;;		 -> STR_4(18), 
   442 ;; Return value:  Size  Location     Type
   443 ;;                  1    wreg      void 
   444 ;; Registers used:
   445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   446 ;; Tracked objects:
   447 ;;		On entry : 0/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   451 ;;      Params:         0       0       0       0       0       0       0
   452 ;;      Locals:         0       1       0       0       0       0       0
   453 ;;      Temps:          0       0       0       0       0       0       0
   454 ;;      Totals:         0       1       0       0       0       0       0
   455 ;;Total ram usage:        1 bytes
   456 ;; Hardware stack levels required when called: 10
   457 ;; This function calls:
   458 ;;		_ClearBuffer
   459 ;;		_GetString
   460 ;;		_Get_complete_state
   461 ;;		_SYSTEM_Initialize
   462 ;;		_UART_Write_Text
   463 ;;		_clear_complete
   464 ;;		_output
   465 ;;		_strcpy
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text0
   472   0010CE                     __ptext0:
   473                           	callstack 0
   474   0010CE                     _main:
   475                           	callstack 21
   476   0010CE                     
   477                           ;main.c: 356:     SYSTEM_Initialize();
   478   0010CE  ECFD  F009         	call	_SYSTEM_Initialize	;wreg free
   479   0010D2                     
   480                           ;main.c: 357:     state = 0;
   481   0010D2  0E00               	movlw	0
   482   0010D4  6E3E               	movwf	(_state+1)^0,c
   483   0010D6  0E00               	movlw	0
   484   0010D8  6E3D               	movwf	_state^0,c
   485   0010DA                     
   486                           ;main.c: 358:     char * check = "your string is : ";
   487   0010DA  0E01               	movlw	low STR_4
   488   0010DC  0100               	movlb	0	; () banked
   489   0010DE  6FD2               	movwf	main@check& (0+255),b
   490   0010E0                     l2367:
   491                           
   492                           ;main.c: 362:         if(state == 0){
   493   0010E0  503D               	movf	_state^0,w,c
   494   0010E2  103E               	iorwf	(_state+1)^0,w,c
   495   0010E4  A4D8               	btfss	status,2,c
   496   0010E6  EF77  F008         	goto	u941
   497   0010EA  EF79  F008         	goto	u940
   498   0010EE                     u941:
   499   0010EE  EF70  F008         	goto	l2367
   500   0010F2                     u940:
   501   0010F2                     
   502                           ;main.c: 364:             strcpy(string, GetString());
   503   0010F2  0EA8               	movlw	low _string
   504   0010F4  6E2F               	movwf	strcpy@dest^0,c
   505   0010F6  EC73  F00A         	call	_GetString	;wreg free
   506   0010FA  6E30               	movwf	strcpy@src^0,c
   507   0010FC  ECE8  F009         	call	_strcpy	;wreg free
   508   001100                     
   509                           ;main.c: 365:             complete = Get_complete_state();
   510   001100  EC6A  F00A         	call	_Get_complete_state	;wreg free
   511   001104  C02D  F037         	movff	?_Get_complete_state,_complete
   512   001108  C02E  F038         	movff	?_Get_complete_state+1,_complete+1
   513   00110C                     
   514                           ;main.c: 366:             if(complete == 1 ){
   515   00110C  0437               	decf	_complete^0,w,c
   516   00110E  1038               	iorwf	(_complete+1)^0,w,c
   517   001110  A4D8               	btfss	status,2,c
   518   001112  EF8D  F008         	goto	u951
   519   001116  EF8F  F008         	goto	u950
   520   00111A                     u951:
   521   00111A  EFB2  F008         	goto	l288
   522   00111E                     u950:
   523   00111E                     
   524                           ;main.c: 367:                 UART_Write_Text(check);
   525   00111E  C0D2  F02E         	movff	main@check,UART_Write_Text@text
   526   001122  502E               	movf	UART_Write_Text@text^0,w,c
   527   001124  A4D8               	btfss	status,2,c
   528   001126  0E06               	movlw	high __smallconst
   529   001128  6E2F               	movwf	(UART_Write_Text@text+1)^0,c
   530   00112A  ECB6  F008         	call	_UART_Write_Text	;wreg free
   531                           
   532                           ;main.c: 368:                 UART_Write_Text(string);
   533   00112E  0EA8               	movlw	low _string
   534   001130  6E2E               	movwf	UART_Write_Text@text^0,c
   535   001132  6A2F               	clrf	(UART_Write_Text@text+1)^0,c
   536   001134  ECB6  F008         	call	_UART_Write_Text	;wreg free
   537   001138                     
   538                           ;main.c: 369:                 strcpy(str,string);
   539   001138  0E94               	movlw	low _str
   540   00113A  6E2F               	movwf	strcpy@dest^0,c
   541   00113C  0EA8               	movlw	low _string
   542   00113E  6E30               	movwf	strcpy@src^0,c
   543   001140  ECE8  F009         	call	_strcpy	;wreg free
   544   001144                     
   545                           ;main.c: 370:                 UART_Write_Text("\r\n\n");
   546   001144  0E2C               	movlw	low STR_5
   547   001146  6E2E               	movwf	UART_Write_Text@text^0,c
   548   001148  502E               	movf	UART_Write_Text@text^0,w,c
   549   00114A  A4D8               	btfss	status,2,c
   550   00114C  0E06               	movlw	high __smallconst
   551   00114E  6E2F               	movwf	(UART_Write_Text@text+1)^0,c
   552   001150  ECB6  F008         	call	_UART_Write_Text	;wreg free
   553   001154                     
   554                           ;main.c: 372:                 output();
   555   001154  EC68  F009         	call	_output	;wreg free
   556   001158                     
   557                           ;main.c: 374:                 clear_complete();
   558   001158  EC65  F00A         	call	_clear_complete	;wreg free
   559   00115C                     
   560                           ;main.c: 375:                 ClearBuffer();
   561   00115C  EC95  F009         	call	_ClearBuffer	;wreg free
   562                           
   563                           ;main.c: 376:             } else {
   564   001160  EF70  F008         	goto	l2367
   565   001164                     l288:
   566   001164  EF70  F008         	goto	l2367
   567   001168  EF48  F000         	goto	start
   568   00116C                     __end_of_main:
   569                           	callstack 0
   570                           
   571 ;; *************** function _strcpy *****************
   572 ;; Defined at:
   573 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcpy.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;  dest            1   46[COMRAM] PTR unsigned char 
   576 ;;		 -> string(20), str(20), 
   577 ;;  src             1   47[COMRAM] PTR const unsigned char 
   578 ;;		 -> string(20), mystring(20), 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  d               1   48[COMRAM] PTR unsigned char 
   581 ;;		 -> string(20), str(20), 
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      PTR unsigned char 
   584 ;; Registers used:
   585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   591 ;;      Params:         2       0       0       0       0       0       0
   592 ;;      Locals:         1       0       0       0       0       0       0
   593 ;;      Temps:          0       0       0       0       0       0       0
   594 ;;      Totals:         3       0       0       0       0       0       0
   595 ;;Total ram usage:        3 bytes
   596 ;; Hardware stack levels used: 1
   597 ;; Hardware stack levels required when called: 6
   598 ;; This function calls:
   599 ;;		Nothing
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text1
   606   0013D0                     __ptext1:
   607                           	callstack 0
   608   0013D0                     _strcpy:
   609                           	callstack 24
   610   0013D0  C02F  F031         	movff	strcpy@dest,strcpy@d
   611   0013D4                     l2359:
   612   0013D4  2A30               	incf	strcpy@src^0,f,c
   613   0013D6  0430               	decf	strcpy@src^0,w,c
   614   0013D8  6ED9               	movwf	fsr2l,c
   615   0013DA  6ADA               	clrf	fsr2h,c
   616   0013DC  2A31               	incf	strcpy@d^0,f,c
   617   0013DE  0431               	decf	strcpy@d^0,w,c
   618   0013E0  6EE1               	movwf	fsr1l,c
   619   0013E2  6AE2               	clrf	fsr1h,c
   620   0013E4  CFDF FFE7          	movff	indf2,indf1
   621   0013E8  50E7               	movf	indf1,w,c
   622   0013EA  A4D8               	btfss	status,2,c
   623   0013EC  EFFA  F009         	goto	u931
   624   0013F0  EFFC  F009         	goto	u930
   625   0013F4                     u931:
   626   0013F4  EFEA  F009         	goto	l2359
   627   0013F8                     u930:
   628   0013F8  0012               	return		;funcret
   629   0013FA                     __end_of_strcpy:
   630                           	callstack 0
   631                           
   632 ;; *************** function _output *****************
   633 ;; Defined at:
   634 ;;		line 113 in file "main.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;		None
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  i               2   20[BANK0 ] int 
   639 ;; Return value:  Size  Location     Type
   640 ;;                  1    wreg      void 
   641 ;; Registers used:
   642 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   648 ;;      Params:         0       0       0       0       0       0       0
   649 ;;      Locals:         0       2       0       0       0       0       0
   650 ;;      Temps:          0       1       0       0       0       0       0
   651 ;;      Totals:         0       3       0       0       0       0       0
   652 ;;Total ram usage:        3 bytes
   653 ;; Hardware stack levels used: 1
   654 ;; Hardware stack levels required when called: 9
   655 ;; This function calls:
   656 ;;		_alphabet_to_code
   657 ;;		_bee_led_output
   658 ;; This function is called by:
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text2
   664   0012D0                     __ptext2:
   665                           	callstack 0
   666   0012D0                     _output:
   667                           	callstack 21
   668   0012D0                     
   669                           ;main.c: 115:     for (int i=0; str[i] >=48 ; i++)
   670   0012D0  0E00               	movlw	0
   671   0012D2  0100               	movlb	0	; () banked
   672   0012D4  6FD1               	movwf	(output@i+1)& (0+255),b
   673   0012D6  0E00               	movlw	0
   674   0012D8  6FD0               	movwf	output@i& (0+255),b
   675   0012DA  EF88  F009         	goto	l2355
   676   0012DE                     l2349:
   677                           
   678                           ; BSR set to: 0
   679                           ;main.c: 116:     {;main.c: 117:         bee_led_output( alphabet_to_code(str[i]) );
   680   0012DE  51D0               	movf	output@i& (0+255),w,b
   681   0012E0  0F94               	addlw	low _str
   682   0012E2  6ED9               	movwf	fsr2l,c
   683   0012E4  6ADA               	clrf	fsr2h,c
   684   0012E6  50DF               	movf	indf2,w,c
   685   0012E8  EC19  F003         	call	_alphabet_to_code
   686   0012EC  C02D  F0C1         	movff	?_alphabet_to_code,bee_led_output@in
   687   0012F0  C02E  F0C2         	movff	?_alphabet_to_code+1,bee_led_output@in+1
   688   0012F4  C02F  F0C3         	movff	?_alphabet_to_code+2,bee_led_output@in+2
   689   0012F8  C030  F0C4         	movff	?_alphabet_to_code+3,bee_led_output@in+3
   690   0012FC  ECCB  F007         	call	_bee_led_output	;wreg free
   691   001300                     
   692                           ;main.c: 118:         str[i] = '\0';
   693   001300  0100               	movlb	0	; () banked
   694   001302  51D0               	movf	output@i& (0+255),w,b
   695   001304  0F94               	addlw	low _str
   696   001306  6ED9               	movwf	fsr2l,c
   697   001308  6ADA               	clrf	fsr2h,c
   698   00130A  6ADF               	clrf	indf2,c
   699   00130C                     
   700                           ; BSR set to: 0
   701                           ;main.c: 119:     }
   702   00130C  4BD0               	infsnz	output@i& (0+255),f,b
   703   00130E  2BD1               	incf	(output@i+1)& (0+255),f,b
   704   001310                     l2355:
   705                           
   706                           ; BSR set to: 0
   707   001310  51D0               	movf	output@i& (0+255),w,b
   708   001312  0F94               	addlw	low _str
   709   001314  6ED9               	movwf	fsr2l,c
   710   001316  6ADA               	clrf	fsr2h,c
   711   001318  0E30               	movlw	48
   712   00131A  60DF               	cpfslt	indf2,c
   713   00131C  EF92  F009         	goto	u921
   714   001320  EF94  F009         	goto	u920
   715   001324                     u921:
   716   001324  EF6F  F009         	goto	l2349
   717   001328                     u920:
   718   001328                     
   719                           ; BSR set to: 0
   720   001328  0012               	return		;funcret
   721   00132A                     __end_of_output:
   722                           	callstack 0
   723                           
   724 ;; *************** function _bee_led_output *****************
   725 ;; Defined at:
   726 ;;		line 122 in file "main.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  in              4    5[BANK0 ] struct .
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  signal          2   11[BANK0 ] int 
   731 ;;  i               2   17[BANK0 ] int 
   732 ;;  count           2   15[BANK0 ] int 
   733 ;;  code            2   13[BANK0 ] int 
   734 ;;  mask            2    9[BANK0 ] int 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   744 ;;      Params:         0       4       0       0       0       0       0
   745 ;;      Locals:         0      10       0       0       0       0       0
   746 ;;      Temps:          3       0       0       0       0       0       0
   747 ;;      Totals:         3      14       0       0       0       0       0
   748 ;;Total ram usage:       17 bytes
   749 ;; Hardware stack levels used: 1
   750 ;; Hardware stack levels required when called: 8
   751 ;; This function calls:
   752 ;;		_UART_Write
   753 ;;		_UART_Write_Text
   754 ;; This function is called by:
   755 ;;		_output
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text3
   760   000F96                     __ptext3:
   761                           	callstack 0
   762   000F96                     _bee_led_output:
   763                           	callstack 21
   764   000F96                     
   765                           ;main.c: 122: void bee_led_output(morse_code in);main.c: 123: {;main.c: 124:     int cou
      +                          nt = in.count;
   766   000F96  C0C3  F0CB         	movff	bee_led_output@in+2,bee_led_output@count
   767   000F9A  C0C4  F0CC         	movff	bee_led_output@in+3,bee_led_output@count+1
   768                           
   769                           ;main.c: 125:     int code = in.code;
   770   000F9E  C0C1  F0C9         	movff	bee_led_output@in,bee_led_output@code
   771   000FA2  C0C2  F0CA         	movff	bee_led_output@in+1,bee_led_output@code+1
   772   000FA6                     
   773                           ;main.c: 126:     int mask = 0x10;
   774   000FA6  0E00               	movlw	0
   775   000FA8  0100               	movlb	0	; () banked
   776   000FAA  6FC6               	movwf	(bee_led_output@mask+1)& (0+255),b
   777   000FAC  0E10               	movlw	16
   778   000FAE  6FC5               	movwf	bee_led_output@mask& (0+255),b
   779   000FB0                     
   780                           ; BSR set to: 0
   781                           ;main.c: 128:     if (count == 0)
   782   000FB0  51CB               	movf	bee_led_output@count& (0+255),w,b
   783   000FB2  11CC               	iorwf	(bee_led_output@count+1)& (0+255),w,b
   784   000FB4  A4D8               	btfss	status,2,c
   785   000FB6  EFDF  F007         	goto	u861
   786   000FBA  EFE1  F007         	goto	u860
   787   000FBE                     u861:
   788   000FBE  EFEE  F007         	goto	l2277
   789   000FC2                     u860:
   790   000FC2                     
   791                           ; BSR set to: 0
   792                           ;main.c: 129:     {;main.c: 130:         _delay((unsigned long)((3000)*(4000000/4000.0))
      +                          );
   793   000FC2  0E10               	movlw	16
   794   000FC4  6E35               	movwf	(??_bee_led_output+1)^0,c
   795   000FC6  0E39               	movlw	57
   796   000FC8  6E34               	movwf	??_bee_led_output^0,c
   797   000FCA  0E0E               	movlw	14
   798   000FCC                     u967:
   799   000FCC  2EE8               	decfsz	wreg,f,c
   800   000FCE  D7FE               	bra	u967
   801   000FD0  2E34               	decfsz	??_bee_led_output^0,f,c
   802   000FD2  D7FC               	bra	u967
   803   000FD4  2E35               	decfsz	(??_bee_led_output+1)^0,f,c
   804   000FD6  D7FA               	bra	u967
   805   000FD8  EF66  F008         	goto	l236
   806   000FDC                     l2277:
   807                           
   808                           ; BSR set to: 0
   809                           ;main.c: 134:     for(int i=count-1; i>=0; i--, code<<=1)
   810   000FDC  0EFF               	movlw	255
   811   000FDE  25CB               	addwf	bee_led_output@count& (0+255),w,b
   812   000FE0  6FCD               	movwf	bee_led_output@i& (0+255),b
   813   000FE2  0EFF               	movlw	255
   814   000FE4  21CC               	addwfc	(bee_led_output@count+1)& (0+255),w,b
   815   000FE6  6FCE               	movwf	(bee_led_output@i+1)& (0+255),b
   816   000FE8  BFCE               	btfsc	(bee_led_output@i+1)& (0+255),7,b
   817   000FEA  EFFB  F007         	goto	u870
   818   000FEE  EFF9  F007         	goto	u871
   819   000FF2                     u871:
   820   000FF2  EFFD  F007         	goto	l2281
   821   000FF6                     u870:
   822   000FF6  EF5B  F008         	goto	l2305
   823   000FFA                     l2281:
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 135:     {;main.c: 136:         UART_Write_Text("i = ");
   827   000FFA  0E27               	movlw	low STR_3
   828   000FFC  6E2E               	movwf	UART_Write_Text@text^0,c
   829   000FFE  502E               	movf	UART_Write_Text@text^0,w,c
   830   001000  A4D8               	btfss	status,2,c
   831   001002  0E06               	movlw	high __smallconst
   832   001004  6E2F               	movwf	(UART_Write_Text@text+1)^0,c
   833   001006  ECB6  F008         	call	_UART_Write_Text	;wreg free
   834   00100A                     
   835                           ;main.c: 137:         UART_Write(i + 48);
   836   00100A  0100               	movlb	0	; () banked
   837   00100C  51CD               	movf	bee_led_output@i& (0+255),w,b
   838   00100E  0F30               	addlw	48
   839   001010  EC3A  F00A         	call	_UART_Write
   840   001014                     
   841                           ;main.c: 138:         int signal = (code & mask) >> 4;
   842   001014  0100               	movlb	0	; () banked
   843   001016  51C5               	movf	bee_led_output@mask& (0+255),w,b
   844   001018  15C9               	andwf	bee_led_output@code& (0+255),w,b
   845   00101A  6E34               	movwf	??_bee_led_output^0,c
   846   00101C  51C6               	movf	(bee_led_output@mask+1)& (0+255),w,b
   847   00101E  15CA               	andwf	(bee_led_output@code+1)& (0+255),w,b
   848   001020  6E35               	movwf	(??_bee_led_output+1)^0,c
   849   001022  0E04               	movlw	4
   850   001024  6E36               	movwf	(??_bee_led_output+2)^0,c
   851   001026                     u885:
   852   001026  3435               	rlcf	(??_bee_led_output+1)^0,w,c
   853   001028  3235               	rrcf	(??_bee_led_output+1)^0,f,c
   854   00102A  3234               	rrcf	??_bee_led_output^0,f,c
   855   00102C  2E36               	decfsz	(??_bee_led_output+2)^0,f,c
   856   00102E  EF13  F008         	goto	u885
   857   001032  C034  F0C7         	movff	??_bee_led_output,bee_led_output@signal
   858   001036  C035  F0C8         	movff	??_bee_led_output+1,bee_led_output@signal+1
   859   00103A                     
   860                           ; BSR set to: 0
   861                           ;main.c: 139:         if (signal == 0)
   862   00103A  51C7               	movf	bee_led_output@signal& (0+255),w,b
   863   00103C  11C8               	iorwf	(bee_led_output@signal+1)& (0+255),w,b
   864   00103E  A4D8               	btfss	status,2,c
   865   001040  EF24  F008         	goto	u891
   866   001044  EF26  F008         	goto	u890
   867   001048                     u891:
   868   001048  EF35  F008         	goto	l239
   869   00104C                     u890:
   870   00104C                     
   871                           ; BSR set to: 0
   872                           ;main.c: 140:         {;main.c: 141:              LATAbits.LATA0 = 1;
   873   00104C  8089               	bsf	137,0,c	;volatile
   874   00104E                     
   875                           ; BSR set to: 0
   876                           ;main.c: 142:             _delay((unsigned long)((250)*(4000000/4000.0)));
   877   00104E  0E02               	movlw	2
   878   001050  6E35               	movwf	(??_bee_led_output+1)^0,c
   879   001052  0E45               	movlw	69
   880   001054  6E34               	movwf	??_bee_led_output^0,c
   881   001056  0EAA               	movlw	170
   882   001058                     u977:
   883   001058  2EE8               	decfsz	wreg,f,c
   884   00105A  D7FE               	bra	u977
   885   00105C  2E34               	decfsz	??_bee_led_output^0,f,c
   886   00105E  D7FC               	bra	u977
   887   001060  2E35               	decfsz	(??_bee_led_output+1)^0,f,c
   888   001062  D7FA               	bra	u977
   889   001064                     
   890                           ;main.c: 143:              LATAbits.LATA0 = 0;
   891   001064  9089               	bcf	137,0,c	;volatile
   892                           
   893                           ;main.c: 144:         }
   894   001066  EF42  F008         	goto	l240
   895   00106A                     l239:
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 146:         {;main.c: 147:              LATAbits.LATA0 = 1;
   899   00106A  8089               	bsf	137,0,c	;volatile
   900   00106C                     
   901                           ; BSR set to: 0
   902                           ;main.c: 148:             _delay((unsigned long)((500)*(4000000/4000.0)));
   903   00106C  0E03               	movlw	3
   904   00106E  6E35               	movwf	(??_bee_led_output+1)^0,c
   905   001070  0E8A               	movlw	138
   906   001072  6E34               	movwf	??_bee_led_output^0,c
   907   001074  0E56               	movlw	86
   908   001076                     u987:
   909   001076  2EE8               	decfsz	wreg,f,c
   910   001078  D7FE               	bra	u987
   911   00107A  2E34               	decfsz	??_bee_led_output^0,f,c
   912   00107C  D7FC               	bra	u987
   913   00107E  2E35               	decfsz	(??_bee_led_output+1)^0,f,c
   914   001080  D7FA               	bra	u987
   915   001082                     
   916                           ;main.c: 149:              LATAbits.LATA0 = 0;
   917   001082  9089               	bcf	137,0,c	;volatile
   918   001084                     l240:
   919                           
   920                           ;main.c: 151:         _delay((unsigned long)((250)*(4000000/4000.0)));
   921   001084  0E02               	movlw	2
   922   001086  6E35               	movwf	(??_bee_led_output+1)^0,c
   923   001088  0E45               	movlw	69
   924   00108A  6E34               	movwf	??_bee_led_output^0,c
   925   00108C  0EAA               	movlw	170
   926   00108E                     u997:
   927   00108E  2EE8               	decfsz	wreg,f,c
   928   001090  D7FE               	bra	u997
   929   001092  2E34               	decfsz	??_bee_led_output^0,f,c
   930   001094  D7FC               	bra	u997
   931   001096  2E35               	decfsz	(??_bee_led_output+1)^0,f,c
   932   001098  D7FA               	bra	u997
   933   00109A                     
   934                           ;main.c: 152:     }
   935   00109A  0100               	movlb	0	; () banked
   936   00109C  07CD               	decf	bee_led_output@i& (0+255),f,b
   937   00109E  A0D8               	btfss	status,0,c
   938   0010A0  07CE               	decf	(bee_led_output@i+1)& (0+255),f,b
   939   0010A2                     
   940                           ; BSR set to: 0
   941   0010A2  90D8               	bcf	status,0,c
   942   0010A4  37C9               	rlcf	bee_led_output@code& (0+255),f,b
   943   0010A6  37CA               	rlcf	(bee_led_output@code+1)& (0+255),f,b
   944   0010A8                     
   945                           ; BSR set to: 0
   946   0010A8  BFCE               	btfsc	(bee_led_output@i+1)& (0+255),7,b
   947   0010AA  EF5B  F008         	goto	u900
   948   0010AE  EF59  F008         	goto	u901
   949   0010B2                     u901:
   950   0010B2  EFFD  F007         	goto	l2281
   951   0010B6                     u900:
   952   0010B6                     l2305:
   953                           
   954                           ; BSR set to: 0
   955                           ;main.c: 153:     _delay((unsigned long)((750)*(4000000/4000.0)));
   956   0010B6  0E04               	movlw	4
   957   0010B8  6E35               	movwf	(??_bee_led_output+1)^0,c
   958   0010BA  0ECF               	movlw	207
   959   0010BC  6E34               	movwf	??_bee_led_output^0,c
   960   0010BE  0E02               	movlw	2
   961   0010C0                     u1007:
   962   0010C0  2EE8               	decfsz	wreg,f,c
   963   0010C2  D7FE               	bra	u1007
   964   0010C4  2E34               	decfsz	??_bee_led_output^0,f,c
   965   0010C6  D7FC               	bra	u1007
   966   0010C8  2E35               	decfsz	(??_bee_led_output+1)^0,f,c
   967   0010CA  D7FA               	bra	u1007
   968   0010CC                     l236:
   969   0010CC  0012               	return		;funcret
   970   0010CE                     __end_of_bee_led_output:
   971                           	callstack 0
   972                           
   973 ;; *************** function _UART_Write_Text *****************
   974 ;; Defined at:
   975 ;;		line 51 in file "setting_hardaware/uart.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  text            2   45[COMRAM] PTR unsigned char 
   978 ;;		 -> STR_5(4), string(20), STR_4(18), STR_3(5), 
   979 ;;		 -> STR_2(10), STR_1(10), 
   980 ;; Auto vars:     Size  Location     Type
   981 ;;  i               2   49[COMRAM] int 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   991 ;;      Params:         2       0       0       0       0       0       0
   992 ;;      Locals:         2       0       0       0       0       0       0
   993 ;;      Temps:          2       0       0       0       0       0       0
   994 ;;      Totals:         6       0       0       0       0       0       0
   995 ;;Total ram usage:        6 bytes
   996 ;; Hardware stack levels used: 1
   997 ;; Hardware stack levels required when called: 7
   998 ;; This function calls:
   999 ;;		_UART_Write
  1000 ;; This function is called by:
  1001 ;;		_bee_led_output
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text4
  1007   00116C                     __ptext4:
  1008                           	callstack 0
  1009   00116C                     _UART_Write_Text:
  1010                           	callstack 21
  1011   00116C                     
  1012                           ;setting_hardaware/uart.c: 52:     for(int i=0;text[i]!='\0';i++)
  1013   00116C  0E00               	movlw	0
  1014   00116E  6E33               	movwf	(UART_Write_Text@i+1)^0,c
  1015   001170  0E00               	movlw	0
  1016   001172  6E32               	movwf	UART_Write_Text@i^0,c
  1017   001174  EFD6  F008         	goto	l2147
  1018   001178                     l2143:
  1019                           
  1020                           ;setting_hardaware/uart.c: 53:         UART_Write(text[i]);
  1021   001178  5032               	movf	UART_Write_Text@i^0,w,c
  1022   00117A  242E               	addwf	UART_Write_Text@text^0,w,c
  1023   00117C  6E30               	movwf	??_UART_Write_Text^0,c
  1024   00117E  5033               	movf	(UART_Write_Text@i+1)^0,w,c
  1025   001180  202F               	addwfc	(UART_Write_Text@text+1)^0,w,c
  1026   001182  6E31               	movwf	(??_UART_Write_Text+1)^0,c
  1027   001184  C030  FFF6         	movff	??_UART_Write_Text,tblptrl
  1028   001188  C031  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1029   00118C  6AF8               	clrf	tblptru,c
  1030   00118E  0E05               	movlw	(high __ramtop+-1)
  1031   001190  64F7               	cpfsgt	tblptrh,c
  1032   001192  D003               	bra	u837
  1033   001194  0008               	tblrd		*
  1034   001196  50F5               	movf	tablat,w,c
  1035   001198  D005               	bra	u830
  1036   00119A                     u837:
  1037   00119A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1038   00119E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1039   0011A2  50EF               	movf	indf0,w,c
  1040   0011A4                     u830:
  1041   0011A4  EC3A  F00A         	call	_UART_Write
  1042   0011A8  4A32               	infsnz	UART_Write_Text@i^0,f,c
  1043   0011AA  2A33               	incf	(UART_Write_Text@i+1)^0,f,c
  1044   0011AC                     l2147:
  1045   0011AC  5032               	movf	UART_Write_Text@i^0,w,c
  1046   0011AE  242E               	addwf	UART_Write_Text@text^0,w,c
  1047   0011B0  6E30               	movwf	??_UART_Write_Text^0,c
  1048   0011B2  5033               	movf	(UART_Write_Text@i+1)^0,w,c
  1049   0011B4  202F               	addwfc	(UART_Write_Text@text+1)^0,w,c
  1050   0011B6  6E31               	movwf	(??_UART_Write_Text+1)^0,c
  1051   0011B8  C030  FFF6         	movff	??_UART_Write_Text,tblptrl
  1052   0011BC  C031  FFF7         	movff	??_UART_Write_Text+1,tblptrh
  1053   0011C0  6AF8               	clrf	tblptru,c
  1054   0011C2  0E05               	movlw	(high __ramtop+-1)
  1055   0011C4  64F7               	cpfsgt	tblptrh,c
  1056   0011C6  D003               	bra	u847
  1057   0011C8  0008               	tblrd		*
  1058   0011CA  50F5               	movf	tablat,w,c
  1059   0011CC  D005               	bra	u840
  1060   0011CE                     u847:
  1061   0011CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1062   0011D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1063   0011D6  50EF               	movf	indf0,w,c
  1064   0011D8                     u840:
  1065   0011D8  0900               	iorlw	0
  1066   0011DA  A4D8               	btfss	status,2,c
  1067   0011DC  EFF2  F008         	goto	u851
  1068   0011E0  EFF4  F008         	goto	u850
  1069   0011E4                     u851:
  1070   0011E4  EFBC  F008         	goto	l2143
  1071   0011E8                     u850:
  1072   0011E8  0012               	return		;funcret
  1073   0011EA                     __end_of_UART_Write_Text:
  1074                           	callstack 0
  1075                           
  1076 ;; *************** function _UART_Write *****************
  1077 ;; Defined at:
  1078 ;;		line 44 in file "setting_hardaware/uart.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;  data            1    wreg     unsigned char 
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;  data            1   44[COMRAM] unsigned char 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      void 
  1085 ;; Registers used:
  1086 ;;		wreg
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1092 ;;      Params:         0       0       0       0       0       0       0
  1093 ;;      Locals:         1       0       0       0       0       0       0
  1094 ;;      Temps:          0       0       0       0       0       0       0
  1095 ;;      Totals:         1       0       0       0       0       0       0
  1096 ;;Total ram usage:        1 bytes
  1097 ;; Hardware stack levels used: 1
  1098 ;; Hardware stack levels required when called: 6
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_UART_Write_Text
  1103 ;;		_bee_led_output
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           	psect	text5
  1108   001474                     __ptext5:
  1109                           	callstack 0
  1110   001474                     _UART_Write:
  1111                           	callstack 21
  1112                           
  1113                           ;incstack = 0
  1114                           ;UART_Write@data stored from wreg
  1115   001474  6E2D               	movwf	UART_Write@data^0,c
  1116   001476                     l105:
  1117   001476  A2AC               	btfss	172,1,c	;volatile
  1118   001478  EF40  F00A         	goto	u821
  1119   00147C  EF42  F00A         	goto	u820
  1120   001480                     u821:
  1121   001480  EF3B  F00A         	goto	l105
  1122   001484                     u820:
  1123   001484                     
  1124                           ;setting_hardaware/uart.c: 47:     TXREG = data;
  1125   001484  C02D  FFAD         	movff	UART_Write@data,4013	;volatile
  1126   001488  0012               	return		;funcret
  1127   00148A                     __end_of_UART_Write:
  1128                           	callstack 0
  1129                           
  1130 ;; *************** function _alphabet_to_code *****************
  1131 ;; Defined at:
  1132 ;;		line 158 in file "main.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;  c               1    wreg     unsigned char 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  c               1    0[BANK0 ] unsigned char 
  1137 ;;  rv              4    1[BANK0 ] struct .
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  4   44[COMRAM] struct .
  1140 ;; Registers used:
  1141 ;;		wreg, status,2, status,0
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1147 ;;      Params:         4       0       0       0       0       0       0
  1148 ;;      Locals:         0       5       0       0       0       0       0
  1149 ;;      Temps:          2       0       0       0       0       0       0
  1150 ;;      Totals:         6       5       0       0       0       0       0
  1151 ;;Total ram usage:       11 bytes
  1152 ;; Hardware stack levels used: 1
  1153 ;; Hardware stack levels required when called: 6
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_output
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text6
  1162   000632                     __ptext6:
  1163                           	callstack 0
  1164   000632                     _alphabet_to_code:
  1165                           	callstack 23
  1166                           
  1167                           ;incstack = 0
  1168                           ;alphabet_to_code@c stored from wreg
  1169   000632  0100               	movlb	0	; () banked
  1170   000634  6FBC               	movwf	alphabet_to_code@c& (0+255),b
  1171   000636                     
  1172                           ;main.c: 158: morse_code alphabet_to_code(char c);main.c: 159: {;main.c: 160:     morse_
      +                          code rv;;main.c: 161:     c |= 32;
  1173   000636  0100               	movlb	0	; () banked
  1174   000638  8BBC               	bsf	alphabet_to_code@c& (0+255),5,b
  1175   00063A                     
  1176                           ; BSR set to: 0
  1177                           ;main.c: 162:     rv.code = 0;
  1178   00063A  0E00               	movlw	0
  1179   00063C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1180   00063E  0E00               	movlw	0
  1181   000640  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1182   000642                     
  1183                           ; BSR set to: 0
  1184                           ;main.c: 163:     rv.count = 0;
  1185   000642  0E00               	movlw	0
  1186   000644  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1187   000646  0E00               	movlw	0
  1188   000648  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1189                           
  1190                           ;main.c: 164:     switch (c)
  1191   00064A  EF8F  F004         	goto	l2261
  1192   00064E                     l2187:
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 170:             rv.code = 0b01000;
  1196   00064E  0E00               	movlw	0
  1197   000650  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1198   000652  0E08               	movlw	8
  1199   000654  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1200                           
  1201                           ;main.c: 171:             rv.count = 2;
  1202   000656  0E00               	movlw	0
  1203   000658  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1204   00065A  0E02               	movlw	2
  1205   00065C  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1206                           
  1207                           ;main.c: 172:             break;
  1208   00065E  EF30  F005         	goto	l245
  1209   000662                     l2189:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 175:             rv.code = 0b10000;
  1213   000662  0E00               	movlw	0
  1214   000664  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1215   000666  0E10               	movlw	16
  1216   000668  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1217                           
  1218                           ;main.c: 176:             rv.count = 4;
  1219   00066A  0E00               	movlw	0
  1220   00066C  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1221   00066E  0E04               	movlw	4
  1222   000670  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1223                           
  1224                           ;main.c: 177:             break;
  1225   000672  EF30  F005         	goto	l245
  1226   000676                     l2191:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;main.c: 180:             rv.code = 0b10100;
  1230   000676  0E00               	movlw	0
  1231   000678  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1232   00067A  0E14               	movlw	20
  1233   00067C  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1234                           
  1235                           ;main.c: 181:             rv.count = 4;
  1236   00067E  0E00               	movlw	0
  1237   000680  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1238   000682  0E04               	movlw	4
  1239   000684  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1240                           
  1241                           ;main.c: 182:             break;
  1242   000686  EF30  F005         	goto	l245
  1243   00068A                     l2193:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 185:             rv.code = 0b10000;
  1247   00068A  0E00               	movlw	0
  1248   00068C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1249   00068E  0E10               	movlw	16
  1250   000690  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1251                           
  1252                           ;main.c: 186:             rv.count = 3;
  1253   000692  0E00               	movlw	0
  1254   000694  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1255   000696  0E03               	movlw	3
  1256   000698  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1257                           
  1258                           ;main.c: 187:             break;
  1259   00069A  EF30  F005         	goto	l245
  1260   00069E                     l2195:
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 190:             rv.code = 0b00000;
  1264   00069E  0E00               	movlw	0
  1265   0006A0  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1266   0006A2  0E00               	movlw	0
  1267   0006A4  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1268                           
  1269                           ;main.c: 191:             rv.count = 1;
  1270   0006A6  0E00               	movlw	0
  1271   0006A8  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1272   0006AA  0E01               	movlw	1
  1273   0006AC  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1274                           
  1275                           ;main.c: 192:             break;
  1276   0006AE  EF30  F005         	goto	l245
  1277   0006B2                     l2197:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 195:             rv.code = 0b00100;
  1281   0006B2  0E00               	movlw	0
  1282   0006B4  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1283   0006B6  0E04               	movlw	4
  1284   0006B8  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1285                           
  1286                           ;main.c: 196:             rv.count = 4;
  1287   0006BA  0E00               	movlw	0
  1288   0006BC  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1289   0006BE  0E04               	movlw	4
  1290   0006C0  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1291                           
  1292                           ;main.c: 197:             break;
  1293   0006C2  EF30  F005         	goto	l245
  1294   0006C6                     l2199:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;main.c: 200:             rv.code = 0b11000;
  1298   0006C6  0E00               	movlw	0
  1299   0006C8  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1300   0006CA  0E18               	movlw	24
  1301   0006CC  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1302                           
  1303                           ;main.c: 201:             rv.count = 3;
  1304   0006CE  0E00               	movlw	0
  1305   0006D0  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1306   0006D2  0E03               	movlw	3
  1307   0006D4  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1308                           
  1309                           ;main.c: 202:             break;
  1310   0006D6  EF30  F005         	goto	l245
  1311   0006DA                     l2201:
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;main.c: 205:             rv.code = 0b00000;
  1315   0006DA  0E00               	movlw	0
  1316   0006DC  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1317   0006DE  0E00               	movlw	0
  1318   0006E0  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1319                           
  1320                           ;main.c: 206:             rv.count = 4;
  1321   0006E2  0E00               	movlw	0
  1322   0006E4  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1323   0006E6  0E04               	movlw	4
  1324   0006E8  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1325                           
  1326                           ;main.c: 207:             break;
  1327   0006EA  EF30  F005         	goto	l245
  1328   0006EE                     l2203:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 210:             rv.code = 0b00000;
  1332   0006EE  0E00               	movlw	0
  1333   0006F0  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1334   0006F2  0E00               	movlw	0
  1335   0006F4  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1336                           
  1337                           ;main.c: 211:             rv.count = 2;
  1338   0006F6  0E00               	movlw	0
  1339   0006F8  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1340   0006FA  0E02               	movlw	2
  1341   0006FC  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1342                           
  1343                           ;main.c: 212:             break;
  1344   0006FE  EF30  F005         	goto	l245
  1345   000702                     l2205:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 215:             rv.code = 0b01110;
  1349   000702  0E00               	movlw	0
  1350   000704  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1351   000706  0E0E               	movlw	14
  1352   000708  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1353                           
  1354                           ;main.c: 216:             rv.count = 4;
  1355   00070A  0E00               	movlw	0
  1356   00070C  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1357   00070E  0E04               	movlw	4
  1358   000710  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1359                           
  1360                           ;main.c: 217:             break;
  1361   000712  EF30  F005         	goto	l245
  1362   000716                     l2207:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 220:             rv.code = 0b10100;
  1366   000716  0E00               	movlw	0
  1367   000718  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1368   00071A  0E14               	movlw	20
  1369   00071C  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1370                           
  1371                           ;main.c: 221:             rv.count = 3;
  1372   00071E  0E00               	movlw	0
  1373   000720  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1374   000722  0E03               	movlw	3
  1375   000724  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1376                           
  1377                           ;main.c: 222:             break;
  1378   000726  EF30  F005         	goto	l245
  1379   00072A                     l2209:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 225:             rv.code = 0b01000;
  1383   00072A  0E00               	movlw	0
  1384   00072C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1385   00072E  0E08               	movlw	8
  1386   000730  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1387                           
  1388                           ;main.c: 226:             rv.count = 4;
  1389   000732  0E00               	movlw	0
  1390   000734  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1391   000736  0E04               	movlw	4
  1392   000738  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1393                           
  1394                           ;main.c: 227:             break;
  1395   00073A  EF30  F005         	goto	l245
  1396   00073E                     l2211:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 230:             rv.code = 0b11000;
  1400   00073E  0E00               	movlw	0
  1401   000740  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1402   000742  0E18               	movlw	24
  1403   000744  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1404                           
  1405                           ;main.c: 231:             rv.count = 2;
  1406   000746  0E00               	movlw	0
  1407   000748  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1408   00074A  0E02               	movlw	2
  1409   00074C  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1410                           
  1411                           ;main.c: 232:             break;
  1412   00074E  EF30  F005         	goto	l245
  1413   000752                     l2213:
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 235:             rv.code = 0b10000;
  1417   000752  0E00               	movlw	0
  1418   000754  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1419   000756  0E10               	movlw	16
  1420   000758  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1421                           
  1422                           ;main.c: 236:             rv.count = 2;
  1423   00075A  0E00               	movlw	0
  1424   00075C  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1425   00075E  0E02               	movlw	2
  1426   000760  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1427                           
  1428                           ;main.c: 237:             break;
  1429   000762  EF30  F005         	goto	l245
  1430   000766                     l2215:
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 240:             rv.code = 0b11100;
  1434   000766  0E00               	movlw	0
  1435   000768  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1436   00076A  0E1C               	movlw	28
  1437   00076C  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1438                           
  1439                           ;main.c: 241:             rv.count = 3;
  1440   00076E  0E00               	movlw	0
  1441   000770  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1442   000772  0E03               	movlw	3
  1443   000774  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1444                           
  1445                           ;main.c: 242:             break;
  1446   000776  EF30  F005         	goto	l245
  1447   00077A                     l2217:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 245:             rv.code = 0b01100;
  1451   00077A  0E00               	movlw	0
  1452   00077C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1453   00077E  0E0C               	movlw	12
  1454   000780  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1455                           
  1456                           ;main.c: 246:             rv.count = 4;
  1457   000782  0E00               	movlw	0
  1458   000784  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1459   000786  0E04               	movlw	4
  1460   000788  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1461                           
  1462                           ;main.c: 247:             break;
  1463   00078A  EF30  F005         	goto	l245
  1464   00078E                     l2219:
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 250:             rv.code = 0b11010;
  1468   00078E  0E00               	movlw	0
  1469   000790  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1470   000792  0E1A               	movlw	26
  1471   000794  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1472                           
  1473                           ;main.c: 251:             rv.count = 4;
  1474   000796  0E00               	movlw	0
  1475   000798  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1476   00079A  0E04               	movlw	4
  1477   00079C  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1478                           
  1479                           ;main.c: 252:             break;
  1480   00079E  EF30  F005         	goto	l245
  1481   0007A2                     l2221:
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;main.c: 255:             rv.code = 0b01000;
  1485   0007A2  0E00               	movlw	0
  1486   0007A4  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1487   0007A6  0E08               	movlw	8
  1488   0007A8  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1489                           
  1490                           ;main.c: 256:             rv.count = 3;
  1491   0007AA  0E00               	movlw	0
  1492   0007AC  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1493   0007AE  0E03               	movlw	3
  1494   0007B0  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1495                           
  1496                           ;main.c: 257:             break;
  1497   0007B2  EF30  F005         	goto	l245
  1498   0007B6                     l2223:
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;main.c: 260:             rv.code = 0b00000;
  1502   0007B6  0E00               	movlw	0
  1503   0007B8  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1504   0007BA  0E00               	movlw	0
  1505   0007BC  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1506                           
  1507                           ;main.c: 261:             rv.count = 3;
  1508   0007BE  0E00               	movlw	0
  1509   0007C0  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1510   0007C2  0E03               	movlw	3
  1511   0007C4  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1512                           
  1513                           ;main.c: 262:             break;
  1514   0007C6  EF30  F005         	goto	l245
  1515   0007CA                     l2225:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 265:             rv.code = 0b10000;
  1519   0007CA  0E00               	movlw	0
  1520   0007CC  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1521   0007CE  0E10               	movlw	16
  1522   0007D0  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1523                           
  1524                           ;main.c: 266:             rv.count = 1;
  1525   0007D2  0E00               	movlw	0
  1526   0007D4  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1527   0007D6  0E01               	movlw	1
  1528   0007D8  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1529                           
  1530                           ;main.c: 267:             break;
  1531   0007DA  EF30  F005         	goto	l245
  1532   0007DE                     l2227:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;main.c: 270:             rv.code = 0b00100;
  1536   0007DE  0E00               	movlw	0
  1537   0007E0  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1538   0007E2  0E04               	movlw	4
  1539   0007E4  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1540                           
  1541                           ;main.c: 271:             rv.count = 3;
  1542   0007E6  0E00               	movlw	0
  1543   0007E8  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1544   0007EA  0E03               	movlw	3
  1545   0007EC  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1546                           
  1547                           ;main.c: 272:             break;
  1548   0007EE  EF30  F005         	goto	l245
  1549   0007F2                     l2229:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 275:             rv.code = 0b00010;
  1553   0007F2  0E00               	movlw	0
  1554   0007F4  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1555   0007F6  0E02               	movlw	2
  1556   0007F8  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1557                           
  1558                           ;main.c: 276:             rv.count = 4;
  1559   0007FA  0E00               	movlw	0
  1560   0007FC  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1561   0007FE  0E04               	movlw	4
  1562   000800  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1563                           
  1564                           ;main.c: 277:             break;
  1565   000802  EF30  F005         	goto	l245
  1566   000806                     l2231:
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 280:             rv.code = 0b01100;
  1570   000806  0E00               	movlw	0
  1571   000808  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1572   00080A  0E0C               	movlw	12
  1573   00080C  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1574                           
  1575                           ;main.c: 281:             rv.count = 3;
  1576   00080E  0E00               	movlw	0
  1577   000810  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1578   000812  0E03               	movlw	3
  1579   000814  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1580                           
  1581                           ;main.c: 282:             break;
  1582   000816  EF30  F005         	goto	l245
  1583   00081A                     l2233:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 285:             rv.code = 0b10010;
  1587   00081A  0E00               	movlw	0
  1588   00081C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1589   00081E  0E12               	movlw	18
  1590   000820  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1591                           
  1592                           ;main.c: 286:             rv.count = 4;
  1593   000822  0E00               	movlw	0
  1594   000824  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1595   000826  0E04               	movlw	4
  1596   000828  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1597                           
  1598                           ;main.c: 287:             break;
  1599   00082A  EF30  F005         	goto	l245
  1600   00082E                     l2235:
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;main.c: 290:             rv.code = 0b10110;
  1604   00082E  0E00               	movlw	0
  1605   000830  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1606   000832  0E16               	movlw	22
  1607   000834  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1608                           
  1609                           ;main.c: 291:             rv.count = 4;
  1610   000836  0E00               	movlw	0
  1611   000838  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1612   00083A  0E04               	movlw	4
  1613   00083C  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1614                           
  1615                           ;main.c: 292:             break;
  1616   00083E  EF30  F005         	goto	l245
  1617   000842                     l2237:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 295:             rv.code = 0b11000;
  1621   000842  0E00               	movlw	0
  1622   000844  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1623   000846  0E18               	movlw	24
  1624   000848  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1625                           
  1626                           ;main.c: 296:             rv.count = 4;
  1627   00084A  0E00               	movlw	0
  1628   00084C  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1629   00084E  0E04               	movlw	4
  1630   000850  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1631                           
  1632                           ;main.c: 297:             break;
  1633   000852  EF30  F005         	goto	l245
  1634   000856                     l2239:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 300:             rv.code = 0b11111;
  1638   000856  0E00               	movlw	0
  1639   000858  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1640   00085A  0E1F               	movlw	31
  1641   00085C  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1642                           
  1643                           ;main.c: 301:             rv.count = 5;
  1644   00085E  0E00               	movlw	0
  1645   000860  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1646   000862  0E05               	movlw	5
  1647   000864  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1648                           
  1649                           ;main.c: 302:             break;
  1650   000866  EF30  F005         	goto	l245
  1651   00086A                     l2241:
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 305:             rv.code = 0b01111;
  1655   00086A  0E00               	movlw	0
  1656   00086C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1657   00086E  0E0F               	movlw	15
  1658   000870  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1659                           
  1660                           ;main.c: 306:             rv.count = 5;
  1661   000872  0E00               	movlw	0
  1662   000874  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1663   000876  0E05               	movlw	5
  1664   000878  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1665                           
  1666                           ;main.c: 307:             break;
  1667   00087A  EF30  F005         	goto	l245
  1668   00087E                     l2243:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;main.c: 310:             rv.code = 0b00111;
  1672   00087E  0E00               	movlw	0
  1673   000880  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1674   000882  0E07               	movlw	7
  1675   000884  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1676                           
  1677                           ;main.c: 311:             rv.count = 5;
  1678   000886  0E00               	movlw	0
  1679   000888  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1680   00088A  0E05               	movlw	5
  1681   00088C  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1682                           
  1683                           ;main.c: 312:             break;
  1684   00088E  EF30  F005         	goto	l245
  1685   000892                     l2245:
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 315:             rv.code = 0b00011;
  1689   000892  0E00               	movlw	0
  1690   000894  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1691   000896  0E03               	movlw	3
  1692   000898  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1693                           
  1694                           ;main.c: 316:             rv.count = 5;
  1695   00089A  0E00               	movlw	0
  1696   00089C  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1697   00089E  0E05               	movlw	5
  1698   0008A0  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1699                           
  1700                           ;main.c: 317:             break;
  1701   0008A2  EF30  F005         	goto	l245
  1702   0008A6                     l2247:
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 320:             rv.code = 0b00001;
  1706   0008A6  0E00               	movlw	0
  1707   0008A8  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1708   0008AA  0E01               	movlw	1
  1709   0008AC  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1710                           
  1711                           ;main.c: 321:             rv.count = 5;
  1712   0008AE  0E00               	movlw	0
  1713   0008B0  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1714   0008B2  0E05               	movlw	5
  1715   0008B4  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1716                           
  1717                           ;main.c: 322:             break;
  1718   0008B6  EF30  F005         	goto	l245
  1719   0008BA                     l2249:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 325:             rv.code = 0b00000;
  1723   0008BA  0E00               	movlw	0
  1724   0008BC  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1725   0008BE  0E00               	movlw	0
  1726   0008C0  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1727                           
  1728                           ;main.c: 326:             rv.count = 5;
  1729   0008C2  0E00               	movlw	0
  1730   0008C4  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1731   0008C6  0E05               	movlw	5
  1732   0008C8  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1733                           
  1734                           ;main.c: 327:             break;
  1735   0008CA  EF30  F005         	goto	l245
  1736   0008CE                     l2251:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 330:             rv.code = 0b10000;
  1740   0008CE  0E00               	movlw	0
  1741   0008D0  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1742   0008D2  0E10               	movlw	16
  1743   0008D4  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1744                           
  1745                           ;main.c: 331:             rv.count = 5;
  1746   0008D6  0E00               	movlw	0
  1747   0008D8  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1748   0008DA  0E05               	movlw	5
  1749   0008DC  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1750                           
  1751                           ;main.c: 332:             break;
  1752   0008DE  EF30  F005         	goto	l245
  1753   0008E2                     l2253:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 335:             rv.code = 0b11000;
  1757   0008E2  0E00               	movlw	0
  1758   0008E4  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1759   0008E6  0E18               	movlw	24
  1760   0008E8  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1761                           
  1762                           ;main.c: 336:             rv.count = 5;
  1763   0008EA  0E00               	movlw	0
  1764   0008EC  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1765   0008EE  0E05               	movlw	5
  1766   0008F0  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1767                           
  1768                           ;main.c: 337:             break;
  1769   0008F2  EF30  F005         	goto	l245
  1770   0008F6                     l2255:
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 340:             rv.code = 0b11100;
  1774   0008F6  0E00               	movlw	0
  1775   0008F8  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1776   0008FA  0E1C               	movlw	28
  1777   0008FC  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1778                           
  1779                           ;main.c: 341:             rv.count = 5;
  1780   0008FE  0E00               	movlw	0
  1781   000900  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1782   000902  0E05               	movlw	5
  1783   000904  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1784                           
  1785                           ;main.c: 342:             break;
  1786   000906  EF30  F005         	goto	l245
  1787   00090A                     l2257:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 345:             rv.code = 0b11110;
  1791   00090A  0E00               	movlw	0
  1792   00090C  6FBE               	movwf	(alphabet_to_code@rv+1)& (0+255),b
  1793   00090E  0E1E               	movlw	30
  1794   000910  6FBD               	movwf	alphabet_to_code@rv& (0+255),b
  1795                           
  1796                           ;main.c: 346:             rv.count = 5;
  1797   000912  0E00               	movlw	0
  1798   000914  6FC0               	movwf	(alphabet_to_code@rv+3)& (0+255),b
  1799   000916  0E05               	movlw	5
  1800   000918  6FBF               	movwf	(alphabet_to_code@rv+2)& (0+255),b
  1801                           
  1802                           ;main.c: 347:             break;
  1803   00091A  EF30  F005         	goto	l245
  1804   00091E                     l2261:
  1805                           
  1806                           ; BSR set to: 0
  1807   00091E  51BC               	movf	alphabet_to_code@c& (0+255),w,b
  1808   000920  6E31               	movwf	??_alphabet_to_code^0,c
  1809   000922  6A32               	clrf	(??_alphabet_to_code+1)^0,c
  1810                           
  1811                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1812                           ; Switch size 1, requested type "simple"
  1813                           ; Number of cases is 1, Range of values is 0 to 0
  1814                           ; switch strategies available:
  1815                           ; Name         Instructions Cycles
  1816                           ; simple_byte            4     3 (average)
  1817                           ;	Chosen strategy is simple_byte
  1818   000924  5032               	movf	(??_alphabet_to_code+1)^0,w,c
  1819   000926  0A00               	xorlw	0	; case 0
  1820   000928  B4D8               	btfsc	status,2,c
  1821   00092A  EF99  F004         	goto	l2527
  1822   00092E  EF30  F005         	goto	l245
  1823   000932                     l2527:
  1824                           
  1825                           ; BSR set to: 0
  1826                           ; Switch size 1, requested type "simple"
  1827                           ; Number of cases is 37, Range of values is 32 to 122
  1828                           ; switch strategies available:
  1829                           ; Name         Instructions Cycles
  1830                           ; simple_byte          112    57 (average)
  1831                           ;	Chosen strategy is simple_byte
  1832   000932  5031               	movf	??_alphabet_to_code^0,w,c
  1833   000934  0A20               	xorlw	32	; case 32
  1834   000936  B4D8               	btfsc	status,2,c
  1835   000938  EF30  F005         	goto	l245
  1836   00093C  0A10               	xorlw	16	; case 48
  1837   00093E  B4D8               	btfsc	status,2,c
  1838   000940  EF2B  F004         	goto	l2239
  1839   000944  0A01               	xorlw	1	; case 49
  1840   000946  B4D8               	btfsc	status,2,c
  1841   000948  EF35  F004         	goto	l2241
  1842   00094C  0A03               	xorlw	3	; case 50
  1843   00094E  B4D8               	btfsc	status,2,c
  1844   000950  EF3F  F004         	goto	l2243
  1845   000954  0A01               	xorlw	1	; case 51
  1846   000956  B4D8               	btfsc	status,2,c
  1847   000958  EF49  F004         	goto	l2245
  1848   00095C  0A07               	xorlw	7	; case 52
  1849   00095E  B4D8               	btfsc	status,2,c
  1850   000960  EF53  F004         	goto	l2247
  1851   000964  0A01               	xorlw	1	; case 53
  1852   000966  B4D8               	btfsc	status,2,c
  1853   000968  EF5D  F004         	goto	l2249
  1854   00096C  0A03               	xorlw	3	; case 54
  1855   00096E  B4D8               	btfsc	status,2,c
  1856   000970  EF67  F004         	goto	l2251
  1857   000974  0A01               	xorlw	1	; case 55
  1858   000976  B4D8               	btfsc	status,2,c
  1859   000978  EF71  F004         	goto	l2253
  1860   00097C  0A0F               	xorlw	15	; case 56
  1861   00097E  B4D8               	btfsc	status,2,c
  1862   000980  EF7B  F004         	goto	l2255
  1863   000984  0A01               	xorlw	1	; case 57
  1864   000986  B4D8               	btfsc	status,2,c
  1865   000988  EF85  F004         	goto	l2257
  1866   00098C  0A58               	xorlw	88	; case 97
  1867   00098E  B4D8               	btfsc	status,2,c
  1868   000990  EF27  F003         	goto	l2187
  1869   000994  0A03               	xorlw	3	; case 98
  1870   000996  B4D8               	btfsc	status,2,c
  1871   000998  EF31  F003         	goto	l2189
  1872   00099C  0A01               	xorlw	1	; case 99
  1873   00099E  B4D8               	btfsc	status,2,c
  1874   0009A0  EF3B  F003         	goto	l2191
  1875   0009A4  0A07               	xorlw	7	; case 100
  1876   0009A6  B4D8               	btfsc	status,2,c
  1877   0009A8  EF45  F003         	goto	l2193
  1878   0009AC  0A01               	xorlw	1	; case 101
  1879   0009AE  B4D8               	btfsc	status,2,c
  1880   0009B0  EF4F  F003         	goto	l2195
  1881   0009B4  0A03               	xorlw	3	; case 102
  1882   0009B6  B4D8               	btfsc	status,2,c
  1883   0009B8  EF59  F003         	goto	l2197
  1884   0009BC  0A01               	xorlw	1	; case 103
  1885   0009BE  B4D8               	btfsc	status,2,c
  1886   0009C0  EF63  F003         	goto	l2199
  1887   0009C4  0A0F               	xorlw	15	; case 104
  1888   0009C6  B4D8               	btfsc	status,2,c
  1889   0009C8  EF6D  F003         	goto	l2201
  1890   0009CC  0A01               	xorlw	1	; case 105
  1891   0009CE  B4D8               	btfsc	status,2,c
  1892   0009D0  EF77  F003         	goto	l2203
  1893   0009D4  0A03               	xorlw	3	; case 106
  1894   0009D6  B4D8               	btfsc	status,2,c
  1895   0009D8  EF81  F003         	goto	l2205
  1896   0009DC  0A01               	xorlw	1	; case 107
  1897   0009DE  B4D8               	btfsc	status,2,c
  1898   0009E0  EF8B  F003         	goto	l2207
  1899   0009E4  0A07               	xorlw	7	; case 108
  1900   0009E6  B4D8               	btfsc	status,2,c
  1901   0009E8  EF95  F003         	goto	l2209
  1902   0009EC  0A01               	xorlw	1	; case 109
  1903   0009EE  B4D8               	btfsc	status,2,c
  1904   0009F0  EF9F  F003         	goto	l2211
  1905   0009F4  0A03               	xorlw	3	; case 110
  1906   0009F6  B4D8               	btfsc	status,2,c
  1907   0009F8  EFA9  F003         	goto	l2213
  1908   0009FC  0A01               	xorlw	1	; case 111
  1909   0009FE  B4D8               	btfsc	status,2,c
  1910   000A00  EFB3  F003         	goto	l2215
  1911   000A04  0A1F               	xorlw	31	; case 112
  1912   000A06  B4D8               	btfsc	status,2,c
  1913   000A08  EFBD  F003         	goto	l2217
  1914   000A0C  0A01               	xorlw	1	; case 113
  1915   000A0E  B4D8               	btfsc	status,2,c
  1916   000A10  EFC7  F003         	goto	l2219
  1917   000A14  0A03               	xorlw	3	; case 114
  1918   000A16  B4D8               	btfsc	status,2,c
  1919   000A18  EFD1  F003         	goto	l2221
  1920   000A1C  0A01               	xorlw	1	; case 115
  1921   000A1E  B4D8               	btfsc	status,2,c
  1922   000A20  EFDB  F003         	goto	l2223
  1923   000A24  0A07               	xorlw	7	; case 116
  1924   000A26  B4D8               	btfsc	status,2,c
  1925   000A28  EFE5  F003         	goto	l2225
  1926   000A2C  0A01               	xorlw	1	; case 117
  1927   000A2E  B4D8               	btfsc	status,2,c
  1928   000A30  EFEF  F003         	goto	l2227
  1929   000A34  0A03               	xorlw	3	; case 118
  1930   000A36  B4D8               	btfsc	status,2,c
  1931   000A38  EFF9  F003         	goto	l2229
  1932   000A3C  0A01               	xorlw	1	; case 119
  1933   000A3E  B4D8               	btfsc	status,2,c
  1934   000A40  EF03  F004         	goto	l2231
  1935   000A44  0A0F               	xorlw	15	; case 120
  1936   000A46  B4D8               	btfsc	status,2,c
  1937   000A48  EF0D  F004         	goto	l2233
  1938   000A4C  0A01               	xorlw	1	; case 121
  1939   000A4E  B4D8               	btfsc	status,2,c
  1940   000A50  EF17  F004         	goto	l2235
  1941   000A54  0A03               	xorlw	3	; case 122
  1942   000A56  B4D8               	btfsc	status,2,c
  1943   000A58  EF21  F004         	goto	l2237
  1944   000A5C  EF30  F005         	goto	l245
  1945   000A60                     l245:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 349:     return rv;
  1949   000A60  C0BD  F02D         	movff	alphabet_to_code@rv,?_alphabet_to_code
  1950   000A64  C0BE  F02E         	movff	alphabet_to_code@rv+1,?_alphabet_to_code+1
  1951   000A68  C0BF  F02F         	movff	alphabet_to_code@rv+2,?_alphabet_to_code+2
  1952   000A6C  C0C0  F030         	movff	alphabet_to_code@rv+3,?_alphabet_to_code+3
  1953   000A70                     
  1954                           ; BSR set to: 0
  1955   000A70  0012               	return		;funcret
  1956   000A72                     __end_of_alphabet_to_code:
  1957                           	callstack 0
  1958                           
  1959 ;; *************** function _clear_complete *****************
  1960 ;; Defined at:
  1961 ;;		line 87 in file "setting_hardaware/uart.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1975 ;;      Params:         0       0       0       0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0       0       0
  1977 ;;      Temps:          0       0       0       0       0       0       0
  1978 ;;      Totals:         0       0       0       0       0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used: 1
  1981 ;; Hardware stack levels required when called: 6
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text7
  1990   0014CA                     __ptext7:
  1991                           	callstack 0
  1992   0014CA                     _clear_complete:
  1993                           	callstack 24
  1994   0014CA                     
  1995                           ;setting_hardaware/uart.c: 88:     input_complete = 0;
  1996   0014CA  0E00               	movlw	0
  1997   0014CC  6E3A               	movwf	(_input_complete+1)^0,c
  1998   0014CE  0E00               	movlw	0
  1999   0014D0  6E39               	movwf	_input_complete^0,c
  2000   0014D2  0012               	return		;funcret
  2001   0014D4                     __end_of_clear_complete:
  2002                           	callstack 0
  2003                           
  2004 ;; *************** function _SYSTEM_Initialize *****************
  2005 ;; Defined at:
  2006 ;;		line 60 in file "setting_hardaware/setting.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;		None
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      void 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2020 ;;      Params:         0       0       0       0       0       0       0
  2021 ;;      Locals:         0       0       0       0       0       0       0
  2022 ;;      Temps:          0       0       0       0       0       0       0
  2023 ;;      Totals:         0       0       0       0       0       0       0
  2024 ;;Total ram usage:        0 bytes
  2025 ;; Hardware stack levels used: 1
  2026 ;; Hardware stack levels required when called: 7
  2027 ;; This function calls:
  2028 ;;		_INTERRUPT_Initialize
  2029 ;;		_OSCILLATOR_Initialize
  2030 ;;		_UART_Initialize
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text8
  2037   0013FA                     __ptext8:
  2038                           	callstack 0
  2039   0013FA                     _SYSTEM_Initialize:
  2040                           	callstack 23
  2041   0013FA                     
  2042                           ;setting_hardaware/setting.c: 63:     OSCILLATOR_Initialize();
  2043   0013FA  EC6F  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  2044                           
  2045                           ;setting_hardaware/setting.c: 67:     INTERRUPT_Initialize();
  2046   0013FE  EC5B  F00A         	call	_INTERRUPT_Initialize	;wreg free
  2047   001402                     
  2048                           ;setting_hardaware/setting.c: 68:     UART_Initialize();
  2049   001402  EC12  F00A         	call	_UART_Initialize	;wreg free
  2050                           
  2051                           ;setting_hardaware/setting.c: 73:     TRISA = 0;
  2052   001406  0E00               	movlw	0
  2053   001408  6E92               	movwf	146,c	;volatile
  2054                           
  2055                           ;setting_hardaware/setting.c: 74:     LATA = 0;
  2056   00140A  0E00               	movlw	0
  2057   00140C  6E89               	movwf	137,c	;volatile
  2058   00140E                     
  2059                           ;setting_hardaware/setting.c: 77:     TRISBbits.RB0 = 1;
  2060   00140E  8093               	bsf	147,0,c	;volatile
  2061   001410                     
  2062                           ;setting_hardaware/setting.c: 78:     TRISBbits.RB1 = 1;
  2063   001410  8293               	bsf	147,1,c	;volatile
  2064   001412                     
  2065                           ;setting_hardaware/setting.c: 79:     PORTBbits.RB0 = 1;
  2066   001412  8081               	bsf	129,0,c	;volatile
  2067   001414                     
  2068                           ;setting_hardaware/setting.c: 80:     PORTBbits.RB1 = 1;
  2069   001414  8281               	bsf	129,1,c	;volatile
  2070   001416                     
  2071                           ;setting_hardaware/setting.c: 82:     T2CONbits.TMR2ON = 0b0;
  2072   001416  94CA               	bcf	202,2,c	;volatile
  2073                           
  2074                           ;setting_hardaware/setting.c: 83:     T2CONbits.T2CKPS = 0b01;
  2075   001418  50CA               	movf	202,w,c	;volatile
  2076   00141A  0BFC               	andlw	-4
  2077   00141C  0901               	iorlw	1
  2078   00141E  6ECA               	movwf	202,c	;volatile
  2079   001420                     
  2080                           ;setting_hardaware/setting.c: 84:     PR2 = 255;
  2081   001420  68CB               	setf	203,c	;volatile
  2082   001422  0012               	return		;funcret
  2083   001424                     __end_of_SYSTEM_Initialize:
  2084                           	callstack 0
  2085                           
  2086 ;; *************** function _UART_Initialize *****************
  2087 ;; Defined at:
  2088 ;;		line 10 in file "setting_hardaware/uart.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2102 ;;      Params:         0       0       0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used: 1
  2108 ;; Hardware stack levels required when called: 6
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_SYSTEM_Initialize
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text9
  2117   001424                     __ptext9:
  2118                           	callstack 0
  2119   001424                     _UART_Initialize:
  2120                           	callstack 23
  2121   001424                     
  2122                           ;setting_hardaware/uart.c: 21:     TRISCbits.TRISC6 = 1;
  2123   001424  8C94               	bsf	148,6,c	;volatile
  2124                           
  2125                           ;setting_hardaware/uart.c: 22:     TRISCbits.TRISC7 = 1;
  2126   001426  8E94               	bsf	148,7,c	;volatile
  2127   001428                     
  2128                           ;setting_hardaware/uart.c: 25:     OSCCONbits.IRCF = 110;
  2129   001428  50D3               	movf	211,w,c	;volatile
  2130   00142A  0B8F               	andlw	-113
  2131   00142C  0960               	iorlw	96
  2132   00142E  6ED3               	movwf	211,c	;volatile
  2133   001430                     
  2134                           ;setting_hardaware/uart.c: 26:     TXSTAbits.SYNC = 0;
  2135   001430  98AC               	bcf	172,4,c	;volatile
  2136   001432                     
  2137                           ;setting_hardaware/uart.c: 27:     BAUDCONbits.BRG16 = 0;
  2138   001432  96B8               	bcf	184,3,c	;volatile
  2139   001434                     
  2140                           ;setting_hardaware/uart.c: 28:     TXSTAbits.BRGH = 1;
  2141   001434  84AC               	bsf	172,2,c	;volatile
  2142                           
  2143                           ;setting_hardaware/uart.c: 29:     SPBRG = 25;
  2144   001436  0E19               	movlw	25
  2145   001438  6EAF               	movwf	175,c	;volatile
  2146   00143A                     
  2147                           ;setting_hardaware/uart.c: 32:     RCSTAbits.SPEN = 1;
  2148   00143A  8EAB               	bsf	171,7,c	;volatile
  2149   00143C                     
  2150                           ;setting_hardaware/uart.c: 33:     PIR1bits.TXIF = 1;
  2151   00143C  889E               	bsf	158,4,c	;volatile
  2152   00143E                     
  2153                           ;setting_hardaware/uart.c: 34:     PIR1bits.RCIF = 0;
  2154   00143E  9A9E               	bcf	158,5,c	;volatile
  2155   001440                     
  2156                           ;setting_hardaware/uart.c: 35:     TXSTAbits.TXEN = 1;
  2157   001440  8AAC               	bsf	172,5,c	;volatile
  2158   001442                     
  2159                           ;setting_hardaware/uart.c: 36:     RCSTAbits.CREN = 1;
  2160   001442  88AB               	bsf	171,4,c	;volatile
  2161   001444                     
  2162                           ;setting_hardaware/uart.c: 37:     PIE1bits.TXIE = 0;
  2163   001444  989D               	bcf	157,4,c	;volatile
  2164   001446                     
  2165                           ;setting_hardaware/uart.c: 38:     IPR1bits.TXIP = 0;
  2166   001446  989F               	bcf	159,4,c	;volatile
  2167   001448                     
  2168                           ;setting_hardaware/uart.c: 39:     PIE1bits.RCIE = 1;
  2169   001448  8A9D               	bsf	157,5,c	;volatile
  2170   00144A                     
  2171                           ;setting_hardaware/uart.c: 40:     IPR1bits.RCIP = 0;
  2172   00144A  9A9F               	bcf	159,5,c	;volatile
  2173   00144C  0012               	return		;funcret
  2174   00144E                     __end_of_UART_Initialize:
  2175                           	callstack 0
  2176                           
  2177 ;; *************** function _OSCILLATOR_Initialize *****************
  2178 ;; Defined at:
  2179 ;;		line 89 in file "setting_hardaware/setting.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		None
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2193 ;;      Params:         0       0       0       0       0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0
  2196 ;;      Totals:         0       0       0       0       0       0       0
  2197 ;;Total ram usage:        0 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 6
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_SYSTEM_Initialize
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text10
  2208   0014DE                     __ptext10:
  2209                           	callstack 0
  2210   0014DE                     _OSCILLATOR_Initialize:
  2211                           	callstack 23
  2212   0014DE                     
  2213                           ;setting_hardaware/setting.c: 91:     IRCF2 = 1;
  2214   0014DE  8CD3               	bsf	4051,6,c	;volatile
  2215                           
  2216                           ;setting_hardaware/setting.c: 92:     IRCF1 = 1;
  2217   0014E0  8AD3               	bsf	4051,5,c	;volatile
  2218                           
  2219                           ;setting_hardaware/setting.c: 93:     IRCF0 = 0;
  2220   0014E2  98D3               	bcf	4051,4,c	;volatile
  2221   0014E4  0012               	return		;funcret
  2222   0014E6                     __end_of_OSCILLATOR_Initialize:
  2223                           	callstack 0
  2224                           
  2225 ;; *************** function _INTERRUPT_Initialize *****************
  2226 ;; Defined at:
  2227 ;;		line 3 in file "setting_hardaware/interrupt_manager.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		None
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2241 ;;      Params:         0       0       0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0
  2244 ;;      Totals:         0       0       0       0       0       0       0
  2245 ;;Total ram usage:        0 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; Hardware stack levels required when called: 6
  2248 ;; This function calls:
  2249 ;;		Nothing
  2250 ;; This function is called by:
  2251 ;;		_SYSTEM_Initialize
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text11
  2256   0014B6                     __ptext11:
  2257                           	callstack 0
  2258   0014B6                     _INTERRUPT_Initialize:
  2259                           	callstack 23
  2260   0014B6                     
  2261                           ;setting_hardaware/interrupt_manager.c: 6:     RCONbits.IPEN = 1;
  2262   0014B6  8ED0               	bsf	208,7,c	;volatile
  2263                           
  2264                           ;setting_hardaware/interrupt_manager.c: 7:     INTCONbits.GIEH = 1;
  2265   0014B8  8EF2               	bsf	242,7,c	;volatile
  2266                           
  2267                           ;setting_hardaware/interrupt_manager.c: 8:     INTCONbits.GIEL = 1;
  2268   0014BA  8CF2               	bsf	242,6,c	;volatile
  2269                           
  2270                           ;setting_hardaware/interrupt_manager.c: 10:     INTCON2bits.RBIP = 1;
  2271   0014BC  80F1               	bsf	241,0,c	;volatile
  2272                           
  2273                           ;setting_hardaware/interrupt_manager.c: 11:     INTCONbits.INT0IF = 0;
  2274   0014BE  92F2               	bcf	242,1,c	;volatile
  2275                           
  2276                           ;setting_hardaware/interrupt_manager.c: 12:     INTCONbits.INT0IE = 1;
  2277   0014C0  88F2               	bsf	242,4,c	;volatile
  2278                           
  2279                           ;setting_hardaware/interrupt_manager.c: 14:     INTCON3bits.INT1IP = 0;
  2280   0014C2  9CF0               	bcf	240,6,c	;volatile
  2281                           
  2282                           ;setting_hardaware/interrupt_manager.c: 15:     INTCON3bits.INT1IF = 0;
  2283   0014C4  90F0               	bcf	240,0,c	;volatile
  2284                           
  2285                           ;setting_hardaware/interrupt_manager.c: 16:     INTCON3bits.INT1IE = 1;
  2286   0014C6  86F0               	bsf	240,3,c	;volatile
  2287   0014C8  0012               	return		;funcret
  2288   0014CA                     __end_of_INTERRUPT_Initialize:
  2289                           	callstack 0
  2290                           
  2291 ;; *************** function _Get_complete_state *****************
  2292 ;; Defined at:
  2293 ;;		line 84 in file "setting_hardaware/uart.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;		None
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  2   44[COMRAM] int 
  2300 ;; Registers used:
  2301 ;;		None
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2307 ;;      Params:         2       0       0       0       0       0       0
  2308 ;;      Locals:         0       0       0       0       0       0       0
  2309 ;;      Temps:          0       0       0       0       0       0       0
  2310 ;;      Totals:         2       0       0       0       0       0       0
  2311 ;;Total ram usage:        2 bytes
  2312 ;; Hardware stack levels used: 1
  2313 ;; Hardware stack levels required when called: 6
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text12
  2322   0014D4                     __ptext12:
  2323                           	callstack 0
  2324   0014D4                     _Get_complete_state:
  2325                           	callstack 24
  2326   0014D4                     
  2327                           ;setting_hardaware/uart.c: 85:     return input_complete;
  2328   0014D4  C039  F02D         	movff	_input_complete,?_Get_complete_state
  2329   0014D8  C03A  F02E         	movff	_input_complete+1,?_Get_complete_state+1
  2330   0014DC  0012               	return		;funcret
  2331   0014DE                     __end_of_Get_complete_state:
  2332                           	callstack 0
  2333                           
  2334 ;; *************** function _GetString *****************
  2335 ;; Defined at:
  2336 ;;		line 81 in file "setting_hardaware/uart.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;		None
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;		None
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      PTR unsigned char 
  2343 ;; Registers used:
  2344 ;;		wreg
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2350 ;;      Params:         2       0       0       0       0       0       0
  2351 ;;      Locals:         0       0       0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0
  2353 ;;      Totals:         2       0       0       0       0       0       0
  2354 ;;Total ram usage:        2 bytes
  2355 ;; Hardware stack levels used: 1
  2356 ;; Hardware stack levels required when called: 6
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_main
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text13
  2365   0014E6                     __ptext13:
  2366                           	callstack 0
  2367   0014E6                     _GetString:
  2368                           	callstack 24
  2369   0014E6                     
  2370                           ;setting_hardaware/uart.c: 82:     return mystring;
  2371   0014E6  0E3F               	movlw	_mystring& (0+255)
  2372   0014E8  0012               	return		;funcret
  2373   0014EA                     __end_of_GetString:
  2374                           	callstack 0
  2375                           
  2376 ;; *************** function _ClearBuffer *****************
  2377 ;; Defined at:
  2378 ;;		line 56 in file "setting_hardaware/uart.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  i               2   44[COMRAM] int 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2392 ;;      Params:         0       0       0       0       0       0       0
  2393 ;;      Locals:         2       0       0       0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0
  2395 ;;      Totals:         2       0       0       0       0       0       0
  2396 ;;Total ram usage:        2 bytes
  2397 ;; Hardware stack levels used: 1
  2398 ;; Hardware stack levels required when called: 6
  2399 ;; This function calls:
  2400 ;;		Nothing
  2401 ;; This function is called by:
  2402 ;;		_main
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text14
  2407   00132A                     __ptext14:
  2408                           	callstack 0
  2409   00132A                     _ClearBuffer:
  2410                           	callstack 24
  2411   00132A                     
  2412                           ;setting_hardaware/uart.c: 57:     for(int i = 0; i < 10 ; i++)
  2413   00132A  0E00               	movlw	0
  2414   00132C  6E2E               	movwf	(ClearBuffer@i+1)^0,c
  2415   00132E  0E00               	movlw	0
  2416   001330  6E2D               	movwf	ClearBuffer@i^0,c
  2417   001332                     l2331:
  2418                           
  2419                           ;setting_hardaware/uart.c: 58:         mystring[i] = '\0';
  2420   001332  502D               	movf	ClearBuffer@i^0,w,c
  2421   001334  0F3F               	addlw	low _mystring
  2422   001336  6ED9               	movwf	fsr2l,c
  2423   001338  6ADA               	clrf	fsr2h,c
  2424   00133A  6ADF               	clrf	indf2,c
  2425   00133C  4A2D               	infsnz	ClearBuffer@i^0,f,c
  2426   00133E  2A2E               	incf	(ClearBuffer@i+1)^0,f,c
  2427   001340  BE2E               	btfsc	(ClearBuffer@i+1)^0,7,c
  2428   001342  EFAC  F009         	goto	u911
  2429   001346  502E               	movf	(ClearBuffer@i+1)^0,w,c
  2430   001348  E109               	bnz	u910
  2431   00134A  0E0A               	movlw	10
  2432   00134C  5C2D               	subwf	ClearBuffer@i^0,w,c
  2433   00134E  A0D8               	btfss	status,0,c
  2434   001350  EFAC  F009         	goto	u911
  2435   001354  EFAE  F009         	goto	u910
  2436   001358                     u911:
  2437   001358  EF99  F009         	goto	l2331
  2438   00135C                     u910:
  2439   00135C                     
  2440                           ;setting_hardaware/uart.c: 59:     lenStr = 0;
  2441   00135C  0E00               	movlw	0
  2442   00135E  6E3C               	movwf	(_lenStr+1)^0,c
  2443   001360  0E00               	movlw	0
  2444   001362  6E3B               	movwf	_lenStr^0,c
  2445   001364  0012               	return		;funcret
  2446   001366                     __end_of_ClearBuffer:
  2447                           	callstack 0
  2448                           
  2449 ;; *************** function _Lo_ISR *****************
  2450 ;; Defined at:
  2451 ;;		line 93 in file "setting_hardaware/uart.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2465 ;;      Params:         0       0       0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0
  2467 ;;      Temps:          7       0       0       0       0       0       0
  2468 ;;      Totals:         7       0       0       0       0       0       0
  2469 ;;Total ram usage:        7 bytes
  2470 ;; Hardware stack levels used: 1
  2471 ;; Hardware stack levels required when called: 5
  2472 ;; This function calls:
  2473 ;;		_MyusartRead
  2474 ;; This function is called by:
  2475 ;;		Interrupt level 1
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	intcodelo
  2480   000018                     __pintcodelo:
  2481                           	callstack 0
  2482   000018                     _Lo_ISR:
  2483                           	callstack 21
  2484                           
  2485                           ;incstack = 0
  2486   000018  8053               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2487   00001A  CFD8 F028          	movff	status,??_Lo_ISR+2
  2488   00001E  CFE8 F029          	movff	wreg,??_Lo_ISR+3
  2489   000022  CFE0 F02A          	movff	bsr,??_Lo_ISR+4
  2490   000026  CFD9 F02B          	movff	fsr2l,??_Lo_ISR+5
  2491   00002A  CFDA F02C          	movff	fsr2h,??_Lo_ISR+6
  2492   00002E                     
  2493                           ;setting_hardaware/uart.c: 95:     if(RCIF)
  2494   00002E  AA9E               	btfss	3998,5,c	;volatile
  2495   000030  EF1C  F000         	goto	i1u62_21
  2496   000034  EF1E  F000         	goto	i1u62_20
  2497   000038                     i1u62_21:
  2498   000038  EF2A  F000         	goto	i1l2001
  2499   00003C                     i1u62_20:
  2500   00003C                     
  2501                           ;setting_hardaware/uart.c: 96:     {;setting_hardaware/uart.c: 98:         if(RCSTAbits.
      +                          OERR)
  2502   00003C  A2AB               	btfss	171,1,c	;volatile
  2503   00003E  EF23  F000         	goto	i1u63_21
  2504   000042  EF25  F000         	goto	i1u63_20
  2505   000046                     i1u63_21:
  2506   000046  EF28  F000         	goto	i1l1999
  2507   00004A                     i1u63_20:
  2508   00004A                     
  2509                           ;setting_hardaware/uart.c: 99:         {;setting_hardaware/uart.c: 100:             CREN
      +                           = 0;
  2510   00004A  98AB               	bcf	4011,4,c	;volatile
  2511                           
  2512                           ;setting_hardaware/uart.c: 101:             __nop();
  2513   00004C  0000               	nop	
  2514                           
  2515                           ;setting_hardaware/uart.c: 102:             CREN = 1;
  2516   00004E  88AB               	bsf	4011,4,c	;volatile
  2517   000050                     i1l1999:
  2518                           
  2519                           ;setting_hardaware/uart.c: 105:         MyusartRead();
  2520   000050  EC34  F009         	call	_MyusartRead	;wreg free
  2521   000054                     i1l2001:
  2522                           
  2523                           ;setting_hardaware/uart.c: 107:     if (INTCON3bits.INT1IF)
  2524   000054  A0F0               	btfss	240,0,c	;volatile
  2525   000056  EF2F  F000         	goto	i1u64_21
  2526   00005A  EF31  F000         	goto	i1u64_20
  2527   00005E                     i1u64_21:
  2528   00005E  EF3C  F000         	goto	i1l141
  2529   000062                     i1u64_20:
  2530   000062                     
  2531                           ;setting_hardaware/uart.c: 108:     {;setting_hardaware/uart.c: 110:         state = (st
      +                          ate + 1) % 2;
  2532   000062  0E01               	movlw	1
  2533   000064  243D               	addwf	_state^0,w,c
  2534   000066  6E26               	movwf	??_Lo_ISR^0,c
  2535   000068  0E00               	movlw	0
  2536   00006A  203E               	addwfc	(_state+1)^0,w,c
  2537   00006C  6E27               	movwf	(??_Lo_ISR+1)^0,c
  2538   00006E  0E01               	movlw	1
  2539   000070  1426               	andwf	??_Lo_ISR^0,w,c
  2540   000072  6E3D               	movwf	_state^0,c
  2541   000074  6A3E               	clrf	(_state+1)^0,c
  2542   000076                     
  2543                           ;setting_hardaware/uart.c: 112:         INTCON3bits.INT1IF = 0;
  2544   000076  90F0               	bcf	240,0,c	;volatile
  2545   000078                     i1l141:
  2546   000078  C02C  FFDA         	movff	??_Lo_ISR+6,fsr2h
  2547   00007C  C02B  FFD9         	movff	??_Lo_ISR+5,fsr2l
  2548   000080  C02A  FFE0         	movff	??_Lo_ISR+4,bsr
  2549   000084  C029  FFE8         	movff	??_Lo_ISR+3,wreg
  2550   000088  C028  FFD8         	movff	??_Lo_ISR+2,status
  2551   00008C  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2552   00008E  0010               	retfie	
  2553   000090                     __end_of_Lo_ISR:
  2554                           	callstack 0
  2555                           
  2556 ;; *************** function _MyusartRead *****************
  2557 ;; Defined at:
  2558 ;;		line 62 in file "setting_hardaware/uart.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2572 ;;      Params:         0       0       0       0       0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0
  2574 ;;      Temps:          1       0       0       0       0       0       0
  2575 ;;      Totals:         1       0       0       0       0       0       0
  2576 ;;Total ram usage:        1 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 4
  2579 ;; This function calls:
  2580 ;;		i1_ClearBuffer
  2581 ;;		i1_UART_Write
  2582 ;; This function is called by:
  2583 ;;		_Lo_ISR
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text16
  2588   001268                     __ptext16:
  2589                           	callstack 0
  2590   001268                     _MyusartRead:
  2591                           	callstack 21
  2592   001268                     
  2593                           ;setting_hardaware/uart.c: 65:     mystring[lenStr] = RCREG;
  2594   001268  503B               	movf	_lenStr^0,w,c
  2595   00126A  0F3F               	addlw	low _mystring
  2596   00126C  6ED9               	movwf	fsr2l,c
  2597   00126E  6ADA               	clrf	fsr2h,c
  2598   001270  CFAE FFDF          	movff	4014,indf2	;volatile
  2599   001274                     
  2600                           ;setting_hardaware/uart.c: 66:     UART_Write(mystring[lenStr]);
  2601   001274  503B               	movf	_lenStr^0,w,c
  2602   001276  0F3F               	addlw	low _mystring
  2603   001278  6ED9               	movwf	fsr2l,c
  2604   00127A  6ADA               	clrf	fsr2h,c
  2605   00127C  50DF               	movf	indf2,w,c
  2606   00127E  EC45  F00A         	call	i1_UART_Write
  2607   001282                     
  2608                           ;setting_hardaware/uart.c: 67:     if(mystring[lenStr] == '\r'){
  2609   001282  503B               	movf	_lenStr^0,w,c
  2610   001284  0F3F               	addlw	low _mystring
  2611   001286  6ED9               	movwf	fsr2l,c
  2612   001288  6ADA               	clrf	fsr2h,c
  2613   00128A  0E0D               	movlw	13
  2614   00128C  18DE               	xorwf	postinc2,w,c
  2615   00128E  A4D8               	btfss	status,2,c
  2616   001290  EF4C  F009         	goto	i1u55_21
  2617   001294  EF4E  F009         	goto	i1u55_20
  2618   001298                     i1u55_21:
  2619   001298  EF55  F009         	goto	i1l1949
  2620   00129C                     i1u55_20:
  2621   00129C                     
  2622                           ;setting_hardaware/uart.c: 68:         UART_Write('\n');
  2623   00129C  0E0A               	movlw	10
  2624   00129E  EC45  F00A         	call	i1_UART_Write
  2625   0012A2                     
  2626                           ;setting_hardaware/uart.c: 69:         input_complete = 1;
  2627   0012A2  0E00               	movlw	0
  2628   0012A4  6E3A               	movwf	(_input_complete+1)^0,c
  2629   0012A6  0E01               	movlw	1
  2630   0012A8  6E39               	movwf	_input_complete^0,c
  2631   0012AA                     i1l1949:
  2632                           
  2633                           ;setting_hardaware/uart.c: 73:     lenStr++;
  2634   0012AA  4A3B               	infsnz	_lenStr^0,f,c
  2635   0012AC  2A3C               	incf	(_lenStr+1)^0,f,c
  2636   0012AE                     
  2637                           ;setting_hardaware/uart.c: 74:     if(lenStr >= 20){
  2638   0012AE  BE3C               	btfsc	(_lenStr+1)^0,7,c
  2639   0012B0  EF63  F009         	goto	i1u56_21
  2640   0012B4  503C               	movf	(_lenStr+1)^0,w,c
  2641   0012B6  E109               	bnz	i1u56_20
  2642   0012B8  0E14               	movlw	20
  2643   0012BA  5C3B               	subwf	_lenStr^0,w,c
  2644   0012BC  A0D8               	btfss	status,0,c
  2645   0012BE  EF63  F009         	goto	i1u56_21
  2646   0012C2  EF65  F009         	goto	i1u56_20
  2647   0012C6                     i1u56_21:
  2648   0012C6  EF67  F009         	goto	i1l124
  2649   0012CA                     i1u56_20:
  2650   0012CA                     
  2651                           ;setting_hardaware/uart.c: 75:         ClearBuffer();
  2652   0012CA  ECB3  F009         	call	i1_ClearBuffer	;wreg free
  2653   0012CE                     i1l124:
  2654   0012CE  0012               	return		;funcret
  2655   0012D0                     __end_of_MyusartRead:
  2656                           	callstack 0
  2657                           
  2658 ;; *************** function i1_UART_Write *****************
  2659 ;; Defined at:
  2660 ;;		line 44 in file "setting_hardaware/uart.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  data            1    wreg     unsigned char 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  data            1   34[COMRAM] unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2674 ;;      Params:         0       0       0       0       0       0       0
  2675 ;;      Locals:         1       0       0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0
  2677 ;;      Totals:         1       0       0       0       0       0       0
  2678 ;;Total ram usage:        1 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 3
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_MyusartRead
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text17
  2689   00148A                     __ptext17:
  2690                           	callstack 0
  2691   00148A                     i1_UART_Write:
  2692                           	callstack 21
  2693                           
  2694                           ;incstack = 0
  2695                           ;i1UART_Write@data stored from wreg
  2696   00148A  6E23               	movwf	i1UART_Write@data^0,c
  2697   00148C                     i1l105:
  2698   00148C  A2AC               	btfss	172,1,c	;volatile
  2699   00148E  EF4B  F00A         	goto	i1u51_21
  2700   001492  EF4D  F00A         	goto	i1u51_20
  2701   001496                     i1u51_21:
  2702   001496  EF46  F00A         	goto	i1l105
  2703   00149A                     i1u51_20:
  2704   00149A                     
  2705                           ;setting_hardaware/uart.c: 47:     TXREG = data;
  2706   00149A  C023  FFAD         	movff	i1UART_Write@data,4013	;volatile
  2707   00149E  0012               	return		;funcret
  2708   0014A0                     __end_ofi1_UART_Write:
  2709                           	callstack 0
  2710                           
  2711 ;; *************** function i1_ClearBuffer *****************
  2712 ;; Defined at:
  2713 ;;		line 56 in file "setting_hardaware/uart.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  i               2   34[COMRAM] int 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2727 ;;      Params:         0       0       0       0       0       0       0
  2728 ;;      Locals:         2       0       0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0
  2730 ;;      Totals:         2       0       0       0       0       0       0
  2731 ;;Total ram usage:        2 bytes
  2732 ;; Hardware stack levels used: 1
  2733 ;; Hardware stack levels required when called: 3
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_MyusartRead
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text18
  2742   001366                     __ptext18:
  2743                           	callstack 0
  2744   001366                     i1_ClearBuffer:
  2745                           	callstack 21
  2746   001366                     
  2747                           ;setting_hardaware/uart.c: 57:     for(int i = 0; i < 10 ; i++)
  2748   001366  0E00               	movlw	0
  2749   001368  6E24               	movwf	(i1ClearBuffer@i+1)^0,c
  2750   00136A  0E00               	movlw	0
  2751   00136C  6E23               	movwf	i1ClearBuffer@i^0,c
  2752   00136E                     i1l1901:
  2753                           
  2754                           ;setting_hardaware/uart.c: 58:         mystring[i] = '\0';
  2755   00136E  5023               	movf	i1ClearBuffer@i^0,w,c
  2756   001370  0F3F               	addlw	low _mystring
  2757   001372  6ED9               	movwf	fsr2l,c
  2758   001374  6ADA               	clrf	fsr2h,c
  2759   001376  6ADF               	clrf	indf2,c
  2760   001378  4A23               	infsnz	i1ClearBuffer@i^0,f,c
  2761   00137A  2A24               	incf	(i1ClearBuffer@i+1)^0,f,c
  2762   00137C  BE24               	btfsc	(i1ClearBuffer@i+1)^0,7,c
  2763   00137E  EFCA  F009         	goto	i1u53_21
  2764   001382  5024               	movf	(i1ClearBuffer@i+1)^0,w,c
  2765   001384  E109               	bnz	i1u53_20
  2766   001386  0E0A               	movlw	10
  2767   001388  5C23               	subwf	i1ClearBuffer@i^0,w,c
  2768   00138A  A0D8               	btfss	status,0,c
  2769   00138C  EFCA  F009         	goto	i1u53_21
  2770   001390  EFCC  F009         	goto	i1u53_20
  2771   001394                     i1u53_21:
  2772   001394  EFB7  F009         	goto	i1l1901
  2773   001398                     i1u53_20:
  2774   001398                     
  2775                           ;setting_hardaware/uart.c: 59:     lenStr = 0;
  2776   001398  0E00               	movlw	0
  2777   00139A  6E3C               	movwf	(_lenStr+1)^0,c
  2778   00139C  0E00               	movlw	0
  2779   00139E  6E3B               	movwf	_lenStr^0,c
  2780   0013A0  0012               	return		;funcret
  2781   0013A2                     __end_ofi1_ClearBuffer:
  2782                           	callstack 0
  2783                           
  2784 ;; *************** function _H_ISR *****************
  2785 ;; Defined at:
  2786 ;;		line 40 in file "main.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  i               2   28[COMRAM] int 
  2791 ;;  i               2   26[COMRAM] int 
  2792 ;;  clock           2   32[COMRAM] int 
  2793 ;;  input_code      2   30[COMRAM] int 
  2794 ;;  input_count     2   24[COMRAM] int 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2804 ;;      Params:         0       0       0       0       0       0       0
  2805 ;;      Locals:        10       0       0       0       0       0       0
  2806 ;;      Temps:          8       0       0       0       0       0       0
  2807 ;;      Totals:        18       0       0       0       0       0       0
  2808 ;;Total ram usage:       18 bytes
  2809 ;; Hardware stack levels used: 1
  2810 ;; Hardware stack levels required when called: 2
  2811 ;; This function calls:
  2812 ;;		_state1_output
  2813 ;;		i2_UART_Write_Text
  2814 ;; This function is called by:
  2815 ;;		Interrupt level 2
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	intcode
  2820   000008                     __pintcode:
  2821                           	callstack 0
  2822   000008                     _H_ISR:
  2823                           	callstack 21
  2824                           
  2825                           ;incstack = 0
  2826   000008  8253               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2827   00000A  EDC7  F006         	call	int_func,f	;refresh shadow registers
  2828                           
  2829                           	psect	intcode_body
  2830   000D8E                     __pintcode_body:
  2831                           	callstack 21
  2832   000D8E                     int_func:
  2833                           	callstack 21
  2834   000D8E  0006               	pop		; remove dummy address from shadow register refresh
  2835   000D90  CFE9 F011          	movff	fsr0l,??_H_ISR
  2836   000D94  CFEA F012          	movff	fsr0h,??_H_ISR+1
  2837   000D98  CFD9 F013          	movff	fsr2l,??_H_ISR+2
  2838   000D9C  CFDA F014          	movff	fsr2h,??_H_ISR+3
  2839   000DA0  CFF6 F015          	movff	tblptrl,??_H_ISR+4
  2840   000DA4  CFF7 F016          	movff	tblptrh,??_H_ISR+5
  2841   000DA8  CFF8 F017          	movff	tblptru,??_H_ISR+6
  2842   000DAC  CFF5 F018          	movff	tablat,??_H_ISR+7
  2843   000DB0                     
  2844                           ;main.c: 42:         UART_Write_Text("interrupt");
  2845   000DB0  0E1D               	movlw	low STR_1
  2846   000DB2  6E02               	movwf	i2UART_Write_Text@text^0,c
  2847   000DB4  5002               	movf	i2UART_Write_Text@text^0,w,c
  2848   000DB6  A4D8               	btfss	status,2,c
  2849   000DB8  0E06               	movlw	high __smallconst
  2850   000DBA  6E03               	movwf	(i2UART_Write_Text@text+1)^0,c
  2851   000DBC  ECF5  F008         	call	i2_UART_Write_Text	;wreg free
  2852   000DC0                     
  2853                           ;main.c: 43:     if (INTCONbits.INT0IF && state == 1)
  2854   000DC0  A2F2               	btfss	242,1,c	;volatile
  2855   000DC2  EFE5  F006         	goto	i2u65_41
  2856   000DC6  EFE7  F006         	goto	i2u65_40
  2857   000DCA                     i2u65_41:
  2858   000DCA  EFB9  F007         	goto	i2l223
  2859   000DCE                     i2u65_40:
  2860   000DCE  043D               	decf	_state^0,w,c
  2861   000DD0  103E               	iorwf	(_state+1)^0,w,c
  2862   000DD2  A4D8               	btfss	status,2,c
  2863   000DD4  EFEE  F006         	goto	i2u66_41
  2864   000DD8  EFF0  F006         	goto	i2u66_40
  2865   000DDC                     i2u66_41:
  2866   000DDC  EFB9  F007         	goto	i2l223
  2867   000DE0                     i2u66_40:
  2868   000DE0                     i2l2015:
  2869                           
  2870                           ;main.c: 46:         {;main.c: 47:             UART_Write_Text("state = 1");
  2871   000DE0  0E13               	movlw	low STR_2
  2872   000DE2  6E02               	movwf	i2UART_Write_Text@text^0,c
  2873   000DE4  5002               	movf	i2UART_Write_Text@text^0,w,c
  2874   000DE6  A4D8               	btfss	status,2,c
  2875   000DE8  0E06               	movlw	high __smallconst
  2876   000DEA  6E03               	movwf	(i2UART_Write_Text@text+1)^0,c
  2877   000DEC  ECF5  F008         	call	i2_UART_Write_Text	;wreg free
  2878   000DF0                     
  2879                           ;main.c: 48:             int input_code = 0;
  2880   000DF0  0E00               	movlw	0
  2881   000DF2  6E20               	movwf	(H_ISR@input_code+1)^0,c
  2882   000DF4  0E00               	movlw	0
  2883   000DF6  6E1F               	movwf	H_ISR@input_code^0,c
  2884   000DF8                     
  2885                           ;main.c: 49:             int input_count = 0;
  2886   000DF8  0E00               	movlw	0
  2887   000DFA  6E1A               	movwf	(H_ISR@input_count+1)^0,c
  2888   000DFC  0E00               	movlw	0
  2889   000DFE  6E19               	movwf	H_ISR@input_count^0,c
  2890   000E00                     
  2891                           ;main.c: 50:             int clock = 0;
  2892   000E00  0E00               	movlw	0
  2893   000E02  6E22               	movwf	(H_ISR@clock+1)^0,c
  2894   000E04  0E00               	movlw	0
  2895   000E06  6E21               	movwf	H_ISR@clock^0,c
  2896                           
  2897                           ;main.c: 51:             while (PORTBbits.RB1 == 0)
  2898   000E08  EF37  F007         	goto	i2l2039
  2899   000E0C                     i2l2023:
  2900                           
  2901                           ;main.c: 52:             {;main.c: 55:                 for(int i=40;i>0 && PORTBbits.RB1
      +                          ==0 ;i--)
  2902   000E0C  0E00               	movlw	0
  2903   000E0E  6E1C               	movwf	(H_ISR@i+1)^0,c
  2904   000E10  0E28               	movlw	40
  2905   000E12  6E1B               	movwf	H_ISR@i^0,c
  2906   000E14  EF1A  F007         	goto	i2l2033
  2907   000E18                     i2l2025:
  2908                           
  2909                           ;main.c: 56:                 {;main.c: 57:                     TMR2 = 0;
  2910   000E18  0E00               	movlw	0
  2911   000E1A  6ECC               	movwf	204,c	;volatile
  2912   000E1C                     
  2913                           ;main.c: 58:                     T2CONbits.TMR2ON = 1;
  2914   000E1C  84CA               	bsf	202,2,c	;volatile
  2915   000E1E                     
  2916                           ;main.c: 59:                     PIR1bits.TMR2IF = 0;
  2917   000E1E  929E               	bcf	158,1,c	;volatile
  2918   000E20                     i2l199:
  2919   000E20  A29E               	btfss	158,1,c	;volatile
  2920   000E22  EF15  F007         	goto	i2u67_41
  2921   000E26  EF17  F007         	goto	i2u67_40
  2922   000E2A                     i2u67_41:
  2923   000E2A  EF10  F007         	goto	i2l199
  2924   000E2E                     i2u67_40:
  2925   000E2E                     
  2926                           ;main.c: 61:                 }
  2927   000E2E  061B               	decf	H_ISR@i^0,f,c
  2928   000E30  A0D8               	btfss	status,0,c
  2929   000E32  061C               	decf	(H_ISR@i+1)^0,f,c
  2930   000E34                     i2l2033:
  2931   000E34  BE1C               	btfsc	(H_ISR@i+1)^0,7,c
  2932   000E36  EF25  F007         	goto	i2u68_41
  2933   000E3A  501C               	movf	(H_ISR@i+1)^0,w,c
  2934   000E3C  E108               	bnz	i2u68_40
  2935   000E3E  041B               	decf	H_ISR@i^0,w,c
  2936   000E40  A0D8               	btfss	status,0,c
  2937   000E42  EF25  F007         	goto	i2u68_41
  2938   000E46  EF27  F007         	goto	i2u68_40
  2939   000E4A                     i2u68_41:
  2940   000E4A  EF2E  F007         	goto	i2l204
  2941   000E4E                     i2u68_40:
  2942   000E4E  A281               	btfss	129,1,c	;volatile
  2943   000E50  EF2C  F007         	goto	i2u69_41
  2944   000E54  EF2E  F007         	goto	i2u69_40
  2945   000E58                     i2u69_41:
  2946   000E58  EF0C  F007         	goto	i2l2025
  2947   000E5C                     i2u69_40:
  2948   000E5C                     i2l204:
  2949                           
  2950                           ;main.c: 62:                 if (PORTBbits.RB1 == 0) clock++;
  2951   000E5C  B281               	btfsc	129,1,c	;volatile
  2952   000E5E  EF33  F007         	goto	i2u70_41
  2953   000E62  EF35  F007         	goto	i2u70_40
  2954   000E66                     i2u70_41:
  2955   000E66  EF37  F007         	goto	i2l2039
  2956   000E6A                     i2u70_40:
  2957   000E6A  4A21               	infsnz	H_ISR@clock^0,f,c
  2958   000E6C  2A22               	incf	(H_ISR@clock+1)^0,f,c
  2959   000E6E                     i2l2039:
  2960                           
  2961                           ;main.c: 51:             while (PORTBbits.RB1 == 0)
  2962   000E6E  A281               	btfss	129,1,c	;volatile
  2963   000E70  EF3C  F007         	goto	i2u71_41
  2964   000E74  EF3E  F007         	goto	i2u71_40
  2965   000E78                     i2u71_41:
  2966   000E78  EF06  F007         	goto	i2l2023
  2967   000E7C                     i2u71_40:
  2968   000E7C                     
  2969                           ;main.c: 64:             TMR2 = 0;
  2970   000E7C  0E00               	movlw	0
  2971   000E7E  6ECC               	movwf	204,c	;volatile
  2972   000E80                     
  2973                           ;main.c: 65:             T2CONbits.TMR2ON = 0;
  2974   000E80  94CA               	bcf	202,2,c	;volatile
  2975   000E82                     
  2976                           ;main.c: 66:             PIR1bits.TMR2IF = 0;
  2977   000E82  929E               	bcf	158,1,c	;volatile
  2978   000E84                     
  2979                           ;main.c: 67:             input_code = input_code << 1;
  2980   000E84  90D8               	bcf	status,0,c
  2981   000E86  341F               	rlcf	H_ISR@input_code^0,w,c
  2982   000E88  6E1F               	movwf	H_ISR@input_code^0,c
  2983   000E8A  3420               	rlcf	(H_ISR@input_code+1)^0,w,c
  2984   000E8C  6E20               	movwf	(H_ISR@input_code+1)^0,c
  2985   000E8E                     
  2986                           ;main.c: 68:             input_count++;
  2987   000E8E  4A19               	infsnz	H_ISR@input_count^0,f,c
  2988   000E90  2A1A               	incf	(H_ISR@input_count+1)^0,f,c
  2989   000E92                     
  2990                           ;main.c: 70:             if (clock == 0)
  2991   000E92  5021               	movf	H_ISR@clock^0,w,c
  2992   000E94  1022               	iorwf	(H_ISR@clock+1)^0,w,c
  2993   000E96  A4D8               	btfss	status,2,c
  2994   000E98  EF50  F007         	goto	i2u72_41
  2995   000E9C  EF52  F007         	goto	i2u72_40
  2996   000EA0                     i2u72_41:
  2997   000EA0  EF54  F007         	goto	i2l2055
  2998   000EA4                     i2u72_40:
  2999   000EA4  EF56  F007         	goto	i2l2057
  3000   000EA8                     i2l2055:
  3001                           
  3002                           ;main.c: 75:             {;main.c: 76:                 input_code += 1;
  3003   000EA8  4A1F               	infsnz	H_ISR@input_code^0,f,c
  3004   000EAA  2A20               	incf	(H_ISR@input_code+1)^0,f,c
  3005   000EAC                     i2l2057:
  3006                           
  3007                           ;main.c: 79:             clock = 0;
  3008   000EAC  0E00               	movlw	0
  3009   000EAE  6E22               	movwf	(H_ISR@clock+1)^0,c
  3010   000EB0  0E00               	movlw	0
  3011   000EB2  6E21               	movwf	H_ISR@clock^0,c
  3012                           
  3013                           ;main.c: 80:             while (PORTBbits.RB1 == 1)
  3014   000EB4  EFB0  F007         	goto	i2l209
  3015   000EB8                     i2l2059:
  3016                           
  3017                           ;main.c: 81:             {;main.c: 84:                 for(int i=40;i>0 && PORTBbits.RB1
      +                          ==1;i--)
  3018   000EB8  0E00               	movlw	0
  3019   000EBA  6E1E               	movwf	(H_ISR@i_1165+1)^0,c
  3020   000EBC  0E28               	movlw	40
  3021   000EBE  6E1D               	movwf	H_ISR@i_1165^0,c
  3022   000EC0  EF70  F007         	goto	i2l2069
  3023   000EC4                     i2l2061:
  3024                           
  3025                           ;main.c: 85:                 {;main.c: 86:                     TMR2 = 0;
  3026   000EC4  0E00               	movlw	0
  3027   000EC6  6ECC               	movwf	204,c	;volatile
  3028   000EC8                     
  3029                           ;main.c: 87:                     T2CONbits.TMR2ON = 1;
  3030   000EC8  84CA               	bsf	202,2,c	;volatile
  3031   000ECA                     
  3032                           ;main.c: 88:                     PIR1bits.TMR2IF = 0;
  3033   000ECA  929E               	bcf	158,1,c	;volatile
  3034   000ECC                     i2l213:
  3035   000ECC  A29E               	btfss	158,1,c	;volatile
  3036   000ECE  EF6B  F007         	goto	i2u73_41
  3037   000ED2  EF6D  F007         	goto	i2u73_40
  3038   000ED6                     i2u73_41:
  3039   000ED6  EF66  F007         	goto	i2l213
  3040   000EDA                     i2u73_40:
  3041   000EDA                     
  3042                           ;main.c: 90:                 }
  3043   000EDA  061D               	decf	H_ISR@i_1165^0,f,c
  3044   000EDC  A0D8               	btfss	status,0,c
  3045   000EDE  061E               	decf	(H_ISR@i_1165+1)^0,f,c
  3046   000EE0                     i2l2069:
  3047   000EE0  BE1E               	btfsc	(H_ISR@i_1165+1)^0,7,c
  3048   000EE2  EF7B  F007         	goto	i2u74_41
  3049   000EE6  501E               	movf	(H_ISR@i_1165+1)^0,w,c
  3050   000EE8  E108               	bnz	i2u74_40
  3051   000EEA  041D               	decf	H_ISR@i_1165^0,w,c
  3052   000EEC  A0D8               	btfss	status,0,c
  3053   000EEE  EF7B  F007         	goto	i2u74_41
  3054   000EF2  EF7D  F007         	goto	i2u74_40
  3055   000EF6                     i2u74_41:
  3056   000EF6  EF84  F007         	goto	i2l218
  3057   000EFA                     i2u74_40:
  3058   000EFA  B281               	btfsc	129,1,c	;volatile
  3059   000EFC  EF82  F007         	goto	i2u75_41
  3060   000F00  EF84  F007         	goto	i2u75_40
  3061   000F04                     i2u75_41:
  3062   000F04  EF62  F007         	goto	i2l2061
  3063   000F08                     i2u75_40:
  3064   000F08                     i2l218:
  3065                           
  3066                           ;main.c: 91:                 if(PORTBbits.RB1 == 1){
  3067   000F08  A281               	btfss	129,1,c	;volatile
  3068   000F0A  EF89  F007         	goto	i2u76_41
  3069   000F0E  EF8B  F007         	goto	i2u76_40
  3070   000F12                     i2u76_41:
  3071   000F12  EFB0  F007         	goto	i2l209
  3072   000F16                     i2u76_40:
  3073   000F16                     
  3074                           ;main.c: 92:                     clock++;
  3075   000F16  4A21               	infsnz	H_ISR@clock^0,f,c
  3076   000F18  2A22               	incf	(H_ISR@clock+1)^0,f,c
  3077   000F1A                     
  3078                           ;main.c: 94:                     if(clock == 3)
  3079   000F1A  0E03               	movlw	3
  3080   000F1C  1821               	xorwf	H_ISR@clock^0,w,c
  3081   000F1E  1022               	iorwf	(H_ISR@clock+1)^0,w,c
  3082   000F20  A4D8               	btfss	status,2,c
  3083   000F22  EF95  F007         	goto	i2u77_41
  3084   000F26  EF97  F007         	goto	i2u77_40
  3085   000F2A                     i2u77_41:
  3086   000F2A  EFA3  F007         	goto	i2l2079
  3087   000F2E                     i2u77_40:
  3088   000F2E                     
  3089                           ;main.c: 95:                     {;main.c: 96:                         state1_output(inp
      +                          ut_code, input_count);
  3090   000F2E  C01F  F008         	movff	H_ISR@input_code,state1_output@input_code
  3091   000F32  C020  F009         	movff	H_ISR@input_code+1,state1_output@input_code+1
  3092   000F36  C019  F00A         	movff	H_ISR@input_count,state1_output@input_count
  3093   000F3A  C01A  F00B         	movff	H_ISR@input_count+1,state1_output@input_count+1
  3094   000F3E  ECD1  F009         	call	_state1_output	;wreg free
  3095                           
  3096                           ;main.c: 97:                     }
  3097   000F42  EFB0  F007         	goto	i2l209
  3098   000F46                     i2l2079:
  3099   000F46  0E06               	movlw	6
  3100   000F48  1821               	xorwf	H_ISR@clock^0,w,c
  3101   000F4A  1022               	iorwf	(H_ISR@clock+1)^0,w,c
  3102   000F4C  A4D8               	btfss	status,2,c
  3103   000F4E  EFAB  F007         	goto	i2u78_41
  3104   000F52  EFAD  F007         	goto	i2u78_40
  3105   000F56                     i2u78_41:
  3106   000F56  EFB0  F007         	goto	i2l209
  3107   000F5A                     i2u78_40:
  3108   000F5A                     
  3109                           ;main.c: 99:                     {;main.c: 101:                         INTCONbits.INT0I
      +                          F = 0;
  3110   000F5A  92F2               	bcf	242,1,c	;volatile
  3111                           
  3112                           ;main.c: 102:                         return;
  3113   000F5C  EFB9  F007         	goto	i2l223
  3114   000F60                     i2l209:
  3115                           
  3116                           ;main.c: 80:             while (PORTBbits.RB1 == 1)
  3117   000F60  B281               	btfsc	129,1,c	;volatile
  3118   000F62  EFB5  F007         	goto	i2u79_41
  3119   000F66  EFB7  F007         	goto	i2u79_40
  3120   000F6A                     i2u79_41:
  3121   000F6A  EF5C  F007         	goto	i2l2059
  3122   000F6E                     i2u79_40:
  3123   000F6E  EFF0  F006         	goto	i2l2015
  3124   000F72                     i2l223:
  3125   000F72  C018  FFF5         	movff	??_H_ISR+7,tablat
  3126   000F76  C017  FFF8         	movff	??_H_ISR+6,tblptru
  3127   000F7A  C016  FFF7         	movff	??_H_ISR+5,tblptrh
  3128   000F7E  C015  FFF6         	movff	??_H_ISR+4,tblptrl
  3129   000F82  C014  FFDA         	movff	??_H_ISR+3,fsr2h
  3130   000F86  C013  FFD9         	movff	??_H_ISR+2,fsr2l
  3131   000F8A  C012  FFEA         	movff	??_H_ISR+1,fsr0h
  3132   000F8E  C011  FFE9         	movff	??_H_ISR,fsr0l
  3133   000F92  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3134   000F94  0011               	retfie		f
  3135   000F96                     __end_of_H_ISR:
  3136                           	callstack 0
  3137                           
  3138 ;; *************** function i2_UART_Write_Text *****************
  3139 ;; Defined at:
  3140 ;;		line 51 in file "setting_hardaware/uart.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  text            2    1[COMRAM] PTR unsigned char 
  3143 ;;		 -> STR_5(4), string(20), STR_4(18), STR_3(5), 
  3144 ;;		 -> STR_2(10), STR_1(10), 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  i               2    5[COMRAM] int 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3156 ;;      Params:         2       0       0       0       0       0       0
  3157 ;;      Locals:         2       0       0       0       0       0       0
  3158 ;;      Temps:          2       0       0       0       0       0       0
  3159 ;;      Totals:         6       0       0       0       0       0       0
  3160 ;;Total ram usage:        6 bytes
  3161 ;; Hardware stack levels used: 1
  3162 ;; Hardware stack levels required when called: 1
  3163 ;; This function calls:
  3164 ;;		i2_UART_Write
  3165 ;; This function is called by:
  3166 ;;		_H_ISR
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text20
  3171   0011EA                     __ptext20:
  3172                           	callstack 0
  3173   0011EA                     i2_UART_Write_Text:
  3174                           	callstack 21
  3175   0011EA                     
  3176                           ;setting_hardaware/uart.c: 52:     for(int i=0;text[i]!='\0';i++)
  3177   0011EA  0E00               	movlw	0
  3178   0011EC  6E07               	movwf	(i2UART_Write_Text@i+1)^0,c
  3179   0011EE  0E00               	movlw	0
  3180   0011F0  6E06               	movwf	i2UART_Write_Text@i^0,c
  3181   0011F2  EF15  F009         	goto	i2l1991
  3182   0011F6                     i2l1987:
  3183                           
  3184                           ;setting_hardaware/uart.c: 53:         UART_Write(text[i]);
  3185   0011F6  5006               	movf	i2UART_Write_Text@i^0,w,c
  3186   0011F8  2402               	addwf	i2UART_Write_Text@text^0,w,c
  3187   0011FA  6E04               	movwf	??i2_UART_Write_Text^0,c
  3188   0011FC  5007               	movf	(i2UART_Write_Text@i+1)^0,w,c
  3189   0011FE  2003               	addwfc	(i2UART_Write_Text@text+1)^0,w,c
  3190   001200  6E05               	movwf	(??i2_UART_Write_Text+1)^0,c
  3191   001202  C004  FFF6         	movff	??i2_UART_Write_Text,tblptrl
  3192   001206  C005  FFF7         	movff	??i2_UART_Write_Text+1,tblptrh
  3193   00120A  6AF8               	clrf	tblptru,c
  3194   00120C  0E05               	movlw	(high __ramtop+-1)
  3195   00120E  64F7               	cpfsgt	tblptrh,c
  3196   001210  D003               	bra	i2u59_47
  3197   001212  0008               	tblrd		*
  3198   001214  50F5               	movf	tablat,w,c
  3199   001216  D005               	bra	i2u59_40
  3200   001218                     i2u59_47:
  3201   001218  CFF6 FFE9          	movff	tblptrl,fsr0l
  3202   00121C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3203   001220  50EF               	movf	indf0,w,c
  3204   001222                     i2u59_40:
  3205   001222  EC50  F00A         	call	i2_UART_Write
  3206   001226  4A06               	infsnz	i2UART_Write_Text@i^0,f,c
  3207   001228  2A07               	incf	(i2UART_Write_Text@i+1)^0,f,c
  3208   00122A                     i2l1991:
  3209   00122A  5006               	movf	i2UART_Write_Text@i^0,w,c
  3210   00122C  2402               	addwf	i2UART_Write_Text@text^0,w,c
  3211   00122E  6E04               	movwf	??i2_UART_Write_Text^0,c
  3212   001230  5007               	movf	(i2UART_Write_Text@i+1)^0,w,c
  3213   001232  2003               	addwfc	(i2UART_Write_Text@text+1)^0,w,c
  3214   001234  6E05               	movwf	(??i2_UART_Write_Text+1)^0,c
  3215   001236  C004  FFF6         	movff	??i2_UART_Write_Text,tblptrl
  3216   00123A  C005  FFF7         	movff	??i2_UART_Write_Text+1,tblptrh
  3217   00123E  6AF8               	clrf	tblptru,c
  3218   001240  0E05               	movlw	(high __ramtop+-1)
  3219   001242  64F7               	cpfsgt	tblptrh,c
  3220   001244  D003               	bra	i2u60_47
  3221   001246  0008               	tblrd		*
  3222   001248  50F5               	movf	tablat,w,c
  3223   00124A  D005               	bra	i2u60_40
  3224   00124C                     i2u60_47:
  3225   00124C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3226   001250  CFF7 FFEA          	movff	tblptrh,fsr0h
  3227   001254  50EF               	movf	indf0,w,c
  3228   001256                     i2u60_40:
  3229   001256  0900               	iorlw	0
  3230   001258  A4D8               	btfss	status,2,c
  3231   00125A  EF31  F009         	goto	i2u61_41
  3232   00125E  EF33  F009         	goto	i2u61_40
  3233   001262                     i2u61_41:
  3234   001262  EFFB  F008         	goto	i2l1987
  3235   001266                     i2u61_40:
  3236   001266  0012               	return		;funcret
  3237   001268                     __end_ofi2_UART_Write_Text:
  3238                           	callstack 0
  3239                           
  3240 ;; *************** function _state1_output *****************
  3241 ;; Defined at:
  3242 ;;		line 27 in file "main.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  input_code      2    7[COMRAM] int 
  3245 ;;  input_count     2    9[COMRAM] int 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  mc              4   12[COMRAM] struct .
  3248 ;;  a               1   11[COMRAM] unsigned char 
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3258 ;;      Params:         4       0       0       0       0       0       0
  3259 ;;      Locals:         5       0       0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0
  3261 ;;      Totals:         9       0       0       0       0       0       0
  3262 ;;Total ram usage:        9 bytes
  3263 ;; Hardware stack levels used: 1
  3264 ;; Hardware stack levels required when called: 1
  3265 ;; This function calls:
  3266 ;;		_code_to_alphabet
  3267 ;;		i2_UART_Write
  3268 ;; This function is called by:
  3269 ;;		_H_ISR
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text21
  3274   0013A2                     __ptext21:
  3275                           	callstack 0
  3276   0013A2                     _state1_output:
  3277                           	callstack 21
  3278   0013A2                     
  3279                           ;main.c: 27: void state1_output(int input_code, int input_count);main.c: 28: {;main.c: 2
      +                          9:     morse_code mc;;main.c: 30:     mc.code = input_code;
  3280   0013A2  C008  F00D         	movff	state1_output@input_code,state1_output@mc
  3281   0013A6  C009  F00E         	movff	state1_output@input_code+1,state1_output@mc+1
  3282                           
  3283                           ;main.c: 31:     mc.count = input_count;
  3284   0013AA  C00A  F00F         	movff	state1_output@input_count,state1_output@mc+2
  3285   0013AE  C00B  F010         	movff	state1_output@input_count+1,state1_output@mc+3
  3286   0013B2                     
  3287                           ;main.c: 33:     char a = code_to_alphabet(mc);
  3288   0013B2  C00D  F001         	movff	state1_output@mc,code_to_alphabet@mc
  3289   0013B6  C00E  F002         	movff	state1_output@mc+1,code_to_alphabet@mc+1
  3290   0013BA  C00F  F003         	movff	state1_output@mc+2,code_to_alphabet@mc+2
  3291   0013BE  C010  F004         	movff	state1_output@mc+3,code_to_alphabet@mc+3
  3292   0013C2  EC39  F005         	call	_code_to_alphabet	;wreg free
  3293   0013C6  6E0C               	movwf	state1_output@a^0,c
  3294   0013C8                     
  3295                           ;main.c: 34:     UART_Write(a);
  3296   0013C8  500C               	movf	state1_output@a^0,w,c
  3297   0013CA  EC50  F00A         	call	i2_UART_Write
  3298   0013CE  0012               	return		;funcret
  3299   0013D0                     __end_of_state1_output:
  3300                           	callstack 0
  3301                           
  3302 ;; *************** function i2_UART_Write *****************
  3303 ;; Defined at:
  3304 ;;		line 44 in file "setting_hardaware/uart.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  data            1    wreg     unsigned char 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  data            1    0[COMRAM] unsigned char 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3318 ;;      Params:         0       0       0       0       0       0       0
  3319 ;;      Locals:         1       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0
  3321 ;;      Totals:         1       0       0       0       0       0       0
  3322 ;;Total ram usage:        1 bytes
  3323 ;; Hardware stack levels used: 1
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_state1_output
  3328 ;;		i2_UART_Write_Text
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text22
  3333   0014A0                     __ptext22:
  3334                           	callstack 0
  3335   0014A0                     i2_UART_Write:
  3336                           	callstack 21
  3337                           
  3338                           ;incstack = 0
  3339                           ;i2UART_Write@data stored from wreg
  3340   0014A0  6E01               	movwf	i2UART_Write@data^0,c
  3341   0014A2                     i2l105:
  3342   0014A2  A2AC               	btfss	172,1,c	;volatile
  3343   0014A4  EF56  F00A         	goto	i2u52_41
  3344   0014A8  EF58  F00A         	goto	i2u52_40
  3345   0014AC                     i2u52_41:
  3346   0014AC  EF51  F00A         	goto	i2l105
  3347   0014B0                     i2u52_40:
  3348   0014B0                     
  3349                           ;setting_hardaware/uart.c: 47:     TXREG = data;
  3350   0014B0  C001  FFAD         	movff	i2UART_Write@data,4013	;volatile
  3351   0014B4  0012               	return		;funcret
  3352   0014B6                     __end_ofi2_UART_Write:
  3353                           	callstack 0
  3354                           
  3355 ;; *************** function _code_to_alphabet *****************
  3356 ;; Defined at:
  3357 ;;		line 385 in file "main.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  mc              4    0[COMRAM] struct .
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  rc              1    6[COMRAM] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      unsigned char 
  3364 ;; Registers used:
  3365 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3371 ;;      Params:         4       0       0       0       0       0       0
  3372 ;;      Locals:         1       0       0       0       0       0       0
  3373 ;;      Temps:          2       0       0       0       0       0       0
  3374 ;;      Totals:         7       0       0       0       0       0       0
  3375 ;;Total ram usage:        7 bytes
  3376 ;; Hardware stack levels used: 1
  3377 ;; This function calls:
  3378 ;;		Nothing
  3379 ;; This function is called by:
  3380 ;;		_state1_output
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text23
  3385   000A72                     __ptext23:
  3386                           	callstack 0
  3387   000A72                     _code_to_alphabet:
  3388                           	callstack 21
  3389   000A72                     
  3390                           ;main.c: 385: char code_to_alphabet(morse_code mc);main.c: 386: {;main.c: 387:     char 
      +                          rc;;main.c: 388:     switch (mc.count)
  3391   000A72  EFA1  F006         	goto	i2l1729
  3392   000A76                     i2l1635:
  3393                           
  3394                           ;main.c: 394:                     rc = 't';
  3395   000A76  0E74               	movlw	116
  3396   000A78  6E07               	movwf	code_to_alphabet@rc^0,c
  3397                           
  3398                           ;main.c: 395:                     break;
  3399   000A7A  EFC5  F006         	goto	i2l1731
  3400   000A7E                     i2l1637:
  3401                           
  3402                           ;main.c: 397:                     rc = 'e';
  3403   000A7E  0E65               	movlw	101
  3404   000A80  6E07               	movwf	code_to_alphabet@rc^0,c
  3405                           
  3406                           ;main.c: 398:                     break;
  3407   000A82  EFC5  F006         	goto	i2l1731
  3408   000A86                     i2l1641:
  3409   000A86  C001  F005         	movff	code_to_alphabet@mc,??_code_to_alphabet
  3410   000A8A  C002  F006         	movff	code_to_alphabet@mc+1,??_code_to_alphabet+1
  3411                           
  3412                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3413                           ; Switch size 1, requested type "simple"
  3414                           ; Number of cases is 1, Range of values is 0 to 0
  3415                           ; switch strategies available:
  3416                           ; Name         Instructions Cycles
  3417                           ; simple_byte            4     3 (average)
  3418                           ;	Chosen strategy is simple_byte
  3419   000A8E  5006               	movf	(??_code_to_alphabet+1)^0,w,c
  3420   000A90  0A00               	xorlw	0	; case 0
  3421   000A92  B4D8               	btfsc	status,2,c
  3422   000A94  EF4E  F005         	goto	i2l2529
  3423   000A98  EFC5  F006         	goto	i2l1731
  3424   000A9C                     i2l2529:
  3425                           
  3426                           ; Switch size 1, requested type "simple"
  3427                           ; Number of cases is 2, Range of values is 0 to 16
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte            7     4 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432   000A9C  5005               	movf	??_code_to_alphabet^0,w,c
  3433   000A9E  0A00               	xorlw	0	; case 0
  3434   000AA0  B4D8               	btfsc	status,2,c
  3435   000AA2  EF3F  F005         	goto	i2l1637
  3436   000AA6  0A10               	xorlw	16	; case 16
  3437   000AA8  B4D8               	btfsc	status,2,c
  3438   000AAA  EF3B  F005         	goto	i2l1635
  3439   000AAE  EFC5  F006         	goto	i2l1731
  3440   000AB2                     i2l1643:
  3441                           
  3442                           ;main.c: 405:                     rc = 'a';
  3443   000AB2  0E61               	movlw	97
  3444   000AB4  6E07               	movwf	code_to_alphabet@rc^0,c
  3445                           
  3446                           ;main.c: 406:                     break;
  3447   000AB6  EFC5  F006         	goto	i2l1731
  3448   000ABA                     i2l1645:
  3449                           
  3450                           ;main.c: 408:                     rc = 'i';
  3451   000ABA  0E69               	movlw	105
  3452   000ABC  6E07               	movwf	code_to_alphabet@rc^0,c
  3453                           
  3454                           ;main.c: 409:                     break;
  3455   000ABE  EFC5  F006         	goto	i2l1731
  3456   000AC2                     i2l1647:
  3457                           
  3458                           ;main.c: 411:                     rc = 'm';
  3459   000AC2  0E6D               	movlw	109
  3460   000AC4  6E07               	movwf	code_to_alphabet@rc^0,c
  3461                           
  3462                           ;main.c: 412:                     break;
  3463   000AC6  EFC5  F006         	goto	i2l1731
  3464   000ACA                     i2l1649:
  3465                           
  3466                           ;main.c: 414:                     rc = 'n';
  3467   000ACA  0E6E               	movlw	110
  3468   000ACC  6E07               	movwf	code_to_alphabet@rc^0,c
  3469                           
  3470                           ;main.c: 415:                     break;
  3471   000ACE  EFC5  F006         	goto	i2l1731
  3472   000AD2                     i2l1653:
  3473   000AD2  C001  F005         	movff	code_to_alphabet@mc,??_code_to_alphabet
  3474   000AD6  C002  F006         	movff	code_to_alphabet@mc+1,??_code_to_alphabet+1
  3475                           
  3476                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3477                           ; Switch size 1, requested type "simple"
  3478                           ; Number of cases is 1, Range of values is 0 to 0
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; simple_byte            4     3 (average)
  3482                           ;	Chosen strategy is simple_byte
  3483   000ADA  5006               	movf	(??_code_to_alphabet+1)^0,w,c
  3484   000ADC  0A00               	xorlw	0	; case 0
  3485   000ADE  B4D8               	btfsc	status,2,c
  3486   000AE0  EF74  F005         	goto	i2l2531
  3487   000AE4  EFC5  F006         	goto	i2l1731
  3488   000AE8                     i2l2531:
  3489                           
  3490                           ; Switch size 1, requested type "simple"
  3491                           ; Number of cases is 4, Range of values is 0 to 24
  3492                           ; switch strategies available:
  3493                           ; Name         Instructions Cycles
  3494                           ; simple_byte           13     7 (average)
  3495                           ;	Chosen strategy is simple_byte
  3496   000AE8  5005               	movf	??_code_to_alphabet^0,w,c
  3497   000AEA  0A00               	xorlw	0	; case 0
  3498   000AEC  B4D8               	btfsc	status,2,c
  3499   000AEE  EF5D  F005         	goto	i2l1645
  3500   000AF2  0A08               	xorlw	8	; case 8
  3501   000AF4  B4D8               	btfsc	status,2,c
  3502   000AF6  EF59  F005         	goto	i2l1643
  3503   000AFA  0A18               	xorlw	24	; case 16
  3504   000AFC  B4D8               	btfsc	status,2,c
  3505   000AFE  EF65  F005         	goto	i2l1649
  3506   000B02  0A08               	xorlw	8	; case 24
  3507   000B04  B4D8               	btfsc	status,2,c
  3508   000B06  EF61  F005         	goto	i2l1647
  3509   000B0A  EFC5  F006         	goto	i2l1731
  3510   000B0E                     i2l1655:
  3511                           
  3512                           ;main.c: 422:                     rc = 'd';
  3513   000B0E  0E64               	movlw	100
  3514   000B10  6E07               	movwf	code_to_alphabet@rc^0,c
  3515                           
  3516                           ;main.c: 423:                     break;
  3517   000B12  EFC5  F006         	goto	i2l1731
  3518   000B16                     i2l1657:
  3519                           
  3520                           ;main.c: 425:                     rc = 'g';
  3521   000B16  0E67               	movlw	103
  3522   000B18  6E07               	movwf	code_to_alphabet@rc^0,c
  3523                           
  3524                           ;main.c: 426:                     break;
  3525   000B1A  EFC5  F006         	goto	i2l1731
  3526   000B1E                     i2l1659:
  3527                           
  3528                           ;main.c: 428:                     rc = 'k';
  3529   000B1E  0E6B               	movlw	107
  3530   000B20  6E07               	movwf	code_to_alphabet@rc^0,c
  3531                           
  3532                           ;main.c: 429:                     break;
  3533   000B22  EFC5  F006         	goto	i2l1731
  3534   000B26                     i2l1661:
  3535                           
  3536                           ;main.c: 431:                     rc = 'o';
  3537   000B26  0E6F               	movlw	111
  3538   000B28  6E07               	movwf	code_to_alphabet@rc^0,c
  3539                           
  3540                           ;main.c: 432:                     break;
  3541   000B2A  EFC5  F006         	goto	i2l1731
  3542   000B2E                     i2l1663:
  3543                           
  3544                           ;main.c: 434:                     rc = 'r';
  3545   000B2E  0E72               	movlw	114
  3546   000B30  6E07               	movwf	code_to_alphabet@rc^0,c
  3547                           
  3548                           ;main.c: 435:                     break;
  3549   000B32  EFC5  F006         	goto	i2l1731
  3550   000B36                     i2l1665:
  3551                           
  3552                           ;main.c: 437:                     rc = 's';
  3553   000B36  0E73               	movlw	115
  3554   000B38  6E07               	movwf	code_to_alphabet@rc^0,c
  3555                           
  3556                           ;main.c: 438:                     break;
  3557   000B3A  EFC5  F006         	goto	i2l1731
  3558   000B3E                     i2l1667:
  3559                           
  3560                           ;main.c: 440:                     rc = 'u';
  3561   000B3E  0E75               	movlw	117
  3562   000B40  6E07               	movwf	code_to_alphabet@rc^0,c
  3563                           
  3564                           ;main.c: 441:                     break;
  3565   000B42  EFC5  F006         	goto	i2l1731
  3566   000B46                     i2l1669:
  3567                           
  3568                           ;main.c: 443:                     rc = 'w';
  3569   000B46  0E77               	movlw	119
  3570   000B48  6E07               	movwf	code_to_alphabet@rc^0,c
  3571                           
  3572                           ;main.c: 444:                     break;
  3573   000B4A  EFC5  F006         	goto	i2l1731
  3574   000B4E                     i2l1673:
  3575   000B4E  C001  F005         	movff	code_to_alphabet@mc,??_code_to_alphabet
  3576   000B52  C002  F006         	movff	code_to_alphabet@mc+1,??_code_to_alphabet+1
  3577                           
  3578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3579                           ; Switch size 1, requested type "simple"
  3580                           ; Number of cases is 1, Range of values is 0 to 0
  3581                           ; switch strategies available:
  3582                           ; Name         Instructions Cycles
  3583                           ; simple_byte            4     3 (average)
  3584                           ;	Chosen strategy is simple_byte
  3585   000B56  5006               	movf	(??_code_to_alphabet+1)^0,w,c
  3586   000B58  0A00               	xorlw	0	; case 0
  3587   000B5A  B4D8               	btfsc	status,2,c
  3588   000B5C  EFB2  F005         	goto	i2l2533
  3589   000B60  EFC5  F006         	goto	i2l1731
  3590   000B64                     i2l2533:
  3591                           
  3592                           ; Switch size 1, requested type "simple"
  3593                           ; Number of cases is 8, Range of values is 0 to 28
  3594                           ; switch strategies available:
  3595                           ; Name         Instructions Cycles
  3596                           ; simple_byte           25    13 (average)
  3597                           ;	Chosen strategy is simple_byte
  3598   000B64  5005               	movf	??_code_to_alphabet^0,w,c
  3599   000B66  0A00               	xorlw	0	; case 0
  3600   000B68  B4D8               	btfsc	status,2,c
  3601   000B6A  EF9B  F005         	goto	i2l1665
  3602   000B6E  0A04               	xorlw	4	; case 4
  3603   000B70  B4D8               	btfsc	status,2,c
  3604   000B72  EF9F  F005         	goto	i2l1667
  3605   000B76  0A0C               	xorlw	12	; case 8
  3606   000B78  B4D8               	btfsc	status,2,c
  3607   000B7A  EF97  F005         	goto	i2l1663
  3608   000B7E  0A04               	xorlw	4	; case 12
  3609   000B80  B4D8               	btfsc	status,2,c
  3610   000B82  EFA3  F005         	goto	i2l1669
  3611   000B86  0A1C               	xorlw	28	; case 16
  3612   000B88  B4D8               	btfsc	status,2,c
  3613   000B8A  EF87  F005         	goto	i2l1655
  3614   000B8E  0A04               	xorlw	4	; case 20
  3615   000B90  B4D8               	btfsc	status,2,c
  3616   000B92  EF8F  F005         	goto	i2l1659
  3617   000B96  0A0C               	xorlw	12	; case 24
  3618   000B98  B4D8               	btfsc	status,2,c
  3619   000B9A  EF8B  F005         	goto	i2l1657
  3620   000B9E  0A04               	xorlw	4	; case 28
  3621   000BA0  B4D8               	btfsc	status,2,c
  3622   000BA2  EF93  F005         	goto	i2l1661
  3623   000BA6  EFC5  F006         	goto	i2l1731
  3624   000BAA                     i2l1675:
  3625                           
  3626                           ;main.c: 451:                     rc = 'b';
  3627   000BAA  0E62               	movlw	98
  3628   000BAC  6E07               	movwf	code_to_alphabet@rc^0,c
  3629                           
  3630                           ;main.c: 452:                     break;
  3631   000BAE  EF6B  F006         	goto	i2l1725
  3632   000BB2                     i2l1677:
  3633                           
  3634                           ;main.c: 454:                     rc = 'c';
  3635   000BB2  0E63               	movlw	99
  3636   000BB4  6E07               	movwf	code_to_alphabet@rc^0,c
  3637                           
  3638                           ;main.c: 455:                     break;
  3639   000BB6  EF6B  F006         	goto	i2l1725
  3640   000BBA                     i2l1679:
  3641                           
  3642                           ;main.c: 457:                     rc = 'f';
  3643   000BBA  0E66               	movlw	102
  3644   000BBC  6E07               	movwf	code_to_alphabet@rc^0,c
  3645                           
  3646                           ;main.c: 458:                     break;
  3647   000BBE  EF6B  F006         	goto	i2l1725
  3648   000BC2                     i2l1681:
  3649                           
  3650                           ;main.c: 460:                     rc = 'h';
  3651   000BC2  0E68               	movlw	104
  3652   000BC4  6E07               	movwf	code_to_alphabet@rc^0,c
  3653                           
  3654                           ;main.c: 461:                     break;
  3655   000BC6  EF6B  F006         	goto	i2l1725
  3656   000BCA                     i2l1683:
  3657                           
  3658                           ;main.c: 463:                     rc = 'j';
  3659   000BCA  0E6A               	movlw	106
  3660   000BCC  6E07               	movwf	code_to_alphabet@rc^0,c
  3661                           
  3662                           ;main.c: 464:                     break;
  3663   000BCE  EF6B  F006         	goto	i2l1725
  3664   000BD2                     i2l1685:
  3665                           
  3666                           ;main.c: 466:                     rc = 'l';
  3667   000BD2  0E6C               	movlw	108
  3668   000BD4  6E07               	movwf	code_to_alphabet@rc^0,c
  3669                           
  3670                           ;main.c: 467:                     break;
  3671   000BD6  EF6B  F006         	goto	i2l1725
  3672   000BDA                     i2l1687:
  3673                           
  3674                           ;main.c: 469:                     rc = 'p';
  3675   000BDA  0E70               	movlw	112
  3676   000BDC  6E07               	movwf	code_to_alphabet@rc^0,c
  3677                           
  3678                           ;main.c: 470:                     break;
  3679   000BDE  EF6B  F006         	goto	i2l1725
  3680   000BE2                     i2l1689:
  3681                           
  3682                           ;main.c: 472:                     rc = 'q';
  3683   000BE2  0E71               	movlw	113
  3684   000BE4  6E07               	movwf	code_to_alphabet@rc^0,c
  3685                           
  3686                           ;main.c: 473:                     break;
  3687   000BE6  EF6B  F006         	goto	i2l1725
  3688   000BEA                     i2l1691:
  3689                           
  3690                           ;main.c: 475:                     rc = 'v';
  3691   000BEA  0E76               	movlw	118
  3692   000BEC  6E07               	movwf	code_to_alphabet@rc^0,c
  3693                           
  3694                           ;main.c: 476:                     break;
  3695   000BEE  EF6B  F006         	goto	i2l1725
  3696   000BF2                     i2l1693:
  3697                           
  3698                           ;main.c: 478:                     rc = 'x';
  3699   000BF2  0E78               	movlw	120
  3700   000BF4  6E07               	movwf	code_to_alphabet@rc^0,c
  3701                           
  3702                           ;main.c: 479:                     break;
  3703   000BF6  EF6B  F006         	goto	i2l1725
  3704   000BFA                     i2l1695:
  3705                           
  3706                           ;main.c: 481:                     rc = 'y';
  3707   000BFA  0E79               	movlw	121
  3708   000BFC  6E07               	movwf	code_to_alphabet@rc^0,c
  3709                           
  3710                           ;main.c: 482:                     break;
  3711   000BFE  EF6B  F006         	goto	i2l1725
  3712   000C02                     i2l1697:
  3713                           
  3714                           ;main.c: 484:                     rc = 'z';
  3715   000C02  0E7A               	movlw	122
  3716   000C04  6E07               	movwf	code_to_alphabet@rc^0,c
  3717                           
  3718                           ;main.c: 485:                     break;
  3719   000C06  EF6B  F006         	goto	i2l1725
  3720   000C0A                     i2l1701:
  3721   000C0A  C001  F005         	movff	code_to_alphabet@mc,??_code_to_alphabet
  3722   000C0E  C002  F006         	movff	code_to_alphabet@mc+1,??_code_to_alphabet+1
  3723                           
  3724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3725                           ; Switch size 1, requested type "simple"
  3726                           ; Number of cases is 1, Range of values is 0 to 0
  3727                           ; switch strategies available:
  3728                           ; Name         Instructions Cycles
  3729                           ; simple_byte            4     3 (average)
  3730                           ;	Chosen strategy is simple_byte
  3731   000C12  5006               	movf	(??_code_to_alphabet+1)^0,w,c
  3732   000C14  0A00               	xorlw	0	; case 0
  3733   000C16  B4D8               	btfsc	status,2,c
  3734   000C18  EF10  F006         	goto	i2l2535
  3735   000C1C  EF6B  F006         	goto	i2l1725
  3736   000C20                     i2l2535:
  3737                           
  3738                           ; Switch size 1, requested type "simple"
  3739                           ; Number of cases is 12, Range of values is 0 to 26
  3740                           ; switch strategies available:
  3741                           ; Name         Instructions Cycles
  3742                           ; simple_byte           37    19 (average)
  3743                           ;	Chosen strategy is simple_byte
  3744   000C20  5005               	movf	??_code_to_alphabet^0,w,c
  3745   000C22  0A00               	xorlw	0	; case 0
  3746   000C24  B4D8               	btfsc	status,2,c
  3747   000C26  EFE1  F005         	goto	i2l1681
  3748   000C2A  0A02               	xorlw	2	; case 2
  3749   000C2C  B4D8               	btfsc	status,2,c
  3750   000C2E  EFF5  F005         	goto	i2l1691
  3751   000C32  0A06               	xorlw	6	; case 4
  3752   000C34  B4D8               	btfsc	status,2,c
  3753   000C36  EFDD  F005         	goto	i2l1679
  3754   000C3A  0A0C               	xorlw	12	; case 8
  3755   000C3C  B4D8               	btfsc	status,2,c
  3756   000C3E  EFE9  F005         	goto	i2l1685
  3757   000C42  0A04               	xorlw	4	; case 12
  3758   000C44  B4D8               	btfsc	status,2,c
  3759   000C46  EFED  F005         	goto	i2l1687
  3760   000C4A  0A02               	xorlw	2	; case 14
  3761   000C4C  B4D8               	btfsc	status,2,c
  3762   000C4E  EFE5  F005         	goto	i2l1683
  3763   000C52  0A1E               	xorlw	30	; case 16
  3764   000C54  B4D8               	btfsc	status,2,c
  3765   000C56  EFD5  F005         	goto	i2l1675
  3766   000C5A  0A02               	xorlw	2	; case 18
  3767   000C5C  B4D8               	btfsc	status,2,c
  3768   000C5E  EFF9  F005         	goto	i2l1693
  3769   000C62  0A06               	xorlw	6	; case 20
  3770   000C64  B4D8               	btfsc	status,2,c
  3771   000C66  EFD9  F005         	goto	i2l1677
  3772   000C6A  0A02               	xorlw	2	; case 22
  3773   000C6C  B4D8               	btfsc	status,2,c
  3774   000C6E  EFFD  F005         	goto	i2l1695
  3775   000C72  0A0E               	xorlw	14	; case 24
  3776   000C74  B4D8               	btfsc	status,2,c
  3777   000C76  EF01  F006         	goto	i2l1697
  3778   000C7A  0A02               	xorlw	2	; case 26
  3779   000C7C  B4D8               	btfsc	status,2,c
  3780   000C7E  EFF1  F005         	goto	i2l1689
  3781   000C82  EF6B  F006         	goto	i2l1725
  3782   000C86                     i2l1703:
  3783                           
  3784                           ;main.c: 491:                     rc = '1';
  3785   000C86  0E31               	movlw	49
  3786   000C88  6E07               	movwf	code_to_alphabet@rc^0,c
  3787                           
  3788                           ;main.c: 492:                     break;
  3789   000C8A  EFC5  F006         	goto	i2l1731
  3790   000C8E                     i2l1705:
  3791                           
  3792                           ;main.c: 494:                     rc = '2';
  3793   000C8E  0E32               	movlw	50
  3794   000C90  6E07               	movwf	code_to_alphabet@rc^0,c
  3795                           
  3796                           ;main.c: 495:                     break;
  3797   000C92  EFC5  F006         	goto	i2l1731
  3798   000C96                     i2l1707:
  3799                           
  3800                           ;main.c: 497:                     rc = '3';
  3801   000C96  0E33               	movlw	51
  3802   000C98  6E07               	movwf	code_to_alphabet@rc^0,c
  3803                           
  3804                           ;main.c: 498:                     break;
  3805   000C9A  EFC5  F006         	goto	i2l1731
  3806   000C9E                     i2l1709:
  3807                           
  3808                           ;main.c: 500:                     rc = '4';
  3809   000C9E  0E34               	movlw	52
  3810   000CA0  6E07               	movwf	code_to_alphabet@rc^0,c
  3811                           
  3812                           ;main.c: 501:                     break;
  3813   000CA2  EFC5  F006         	goto	i2l1731
  3814   000CA6                     i2l1711:
  3815                           
  3816                           ;main.c: 503:                     rc = '5';
  3817   000CA6  0E35               	movlw	53
  3818   000CA8  6E07               	movwf	code_to_alphabet@rc^0,c
  3819                           
  3820                           ;main.c: 504:                     break;
  3821   000CAA  EFC5  F006         	goto	i2l1731
  3822   000CAE                     i2l1713:
  3823                           
  3824                           ;main.c: 506:                     rc = '6';
  3825   000CAE  0E36               	movlw	54
  3826   000CB0  6E07               	movwf	code_to_alphabet@rc^0,c
  3827                           
  3828                           ;main.c: 507:                     break;
  3829   000CB2  EFC5  F006         	goto	i2l1731
  3830   000CB6                     i2l1715:
  3831                           
  3832                           ;main.c: 509:                     rc = '7';
  3833   000CB6  0E37               	movlw	55
  3834   000CB8  6E07               	movwf	code_to_alphabet@rc^0,c
  3835                           
  3836                           ;main.c: 510:                     break;
  3837   000CBA  EFC5  F006         	goto	i2l1731
  3838   000CBE                     i2l1717:
  3839                           
  3840                           ;main.c: 512:                     rc = '8';
  3841   000CBE  0E38               	movlw	56
  3842   000CC0  6E07               	movwf	code_to_alphabet@rc^0,c
  3843                           
  3844                           ;main.c: 513:                     break;
  3845   000CC2  EFC5  F006         	goto	i2l1731
  3846   000CC6                     i2l1719:
  3847                           
  3848                           ;main.c: 515:                     rc = '9';
  3849   000CC6  0E39               	movlw	57
  3850   000CC8  6E07               	movwf	code_to_alphabet@rc^0,c
  3851                           
  3852                           ;main.c: 516:                     break;
  3853   000CCA  EFC5  F006         	goto	i2l1731
  3854   000CCE                     i2l1721:
  3855                           
  3856                           ;main.c: 518:                     rc = '0';
  3857   000CCE  0E30               	movlw	48
  3858   000CD0  6E07               	movwf	code_to_alphabet@rc^0,c
  3859                           
  3860                           ;main.c: 519:                     break;
  3861   000CD2  EFC5  F006         	goto	i2l1731
  3862   000CD6                     i2l1725:
  3863   000CD6  C001  F005         	movff	code_to_alphabet@mc,??_code_to_alphabet
  3864   000CDA  C002  F006         	movff	code_to_alphabet@mc+1,??_code_to_alphabet+1
  3865                           
  3866                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3867                           ; Switch size 1, requested type "simple"
  3868                           ; Number of cases is 1, Range of values is 0 to 0
  3869                           ; switch strategies available:
  3870                           ; Name         Instructions Cycles
  3871                           ; simple_byte            4     3 (average)
  3872                           ;	Chosen strategy is simple_byte
  3873   000CDE  5006               	movf	(??_code_to_alphabet+1)^0,w,c
  3874   000CE0  0A00               	xorlw	0	; case 0
  3875   000CE2  B4D8               	btfsc	status,2,c
  3876   000CE4  EF76  F006         	goto	i2l2537
  3877   000CE8  EFC5  F006         	goto	i2l1731
  3878   000CEC                     i2l2537:
  3879                           
  3880                           ; Switch size 1, requested type "simple"
  3881                           ; Number of cases is 10, Range of values is 0 to 31
  3882                           ; switch strategies available:
  3883                           ; Name         Instructions Cycles
  3884                           ; simple_byte           31    16 (average)
  3885                           ;	Chosen strategy is simple_byte
  3886   000CEC  5005               	movf	??_code_to_alphabet^0,w,c
  3887   000CEE  0A00               	xorlw	0	; case 0
  3888   000CF0  B4D8               	btfsc	status,2,c
  3889   000CF2  EF53  F006         	goto	i2l1711
  3890   000CF6  0A01               	xorlw	1	; case 1
  3891   000CF8  B4D8               	btfsc	status,2,c
  3892   000CFA  EF4F  F006         	goto	i2l1709
  3893   000CFE  0A02               	xorlw	2	; case 3
  3894   000D00  B4D8               	btfsc	status,2,c
  3895   000D02  EF4B  F006         	goto	i2l1707
  3896   000D06  0A04               	xorlw	4	; case 7
  3897   000D08  B4D8               	btfsc	status,2,c
  3898   000D0A  EF47  F006         	goto	i2l1705
  3899   000D0E  0A08               	xorlw	8	; case 15
  3900   000D10  B4D8               	btfsc	status,2,c
  3901   000D12  EF43  F006         	goto	i2l1703
  3902   000D16  0A1F               	xorlw	31	; case 16
  3903   000D18  B4D8               	btfsc	status,2,c
  3904   000D1A  EF57  F006         	goto	i2l1713
  3905   000D1E  0A08               	xorlw	8	; case 24
  3906   000D20  B4D8               	btfsc	status,2,c
  3907   000D22  EF5B  F006         	goto	i2l1715
  3908   000D26  0A04               	xorlw	4	; case 28
  3909   000D28  B4D8               	btfsc	status,2,c
  3910   000D2A  EF5F  F006         	goto	i2l1717
  3911   000D2E  0A02               	xorlw	2	; case 30
  3912   000D30  B4D8               	btfsc	status,2,c
  3913   000D32  EF63  F006         	goto	i2l1719
  3914   000D36  0A01               	xorlw	1	; case 31
  3915   000D38  B4D8               	btfsc	status,2,c
  3916   000D3A  EF67  F006         	goto	i2l1721
  3917   000D3E  EFC5  F006         	goto	i2l1731
  3918   000D42                     i2l1729:
  3919   000D42  EE20  F003         	lfsr	2,code_to_alphabet@mc+2
  3920   000D46  CFDE F005          	movff	postinc2,??_code_to_alphabet
  3921   000D4A  CFDD F006          	movff	postdec2,??_code_to_alphabet+1
  3922                           
  3923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3924                           ; Switch size 1, requested type "simple"
  3925                           ; Number of cases is 1, Range of values is 0 to 0
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; simple_byte            4     3 (average)
  3929                           ;	Chosen strategy is simple_byte
  3930   000D4E  5006               	movf	(??_code_to_alphabet+1)^0,w,c
  3931   000D50  0A00               	xorlw	0	; case 0
  3932   000D52  B4D8               	btfsc	status,2,c
  3933   000D54  EFAE  F006         	goto	i2l2539
  3934   000D58  EFC5  F006         	goto	i2l1731
  3935   000D5C                     i2l2539:
  3936                           
  3937                           ; Switch size 1, requested type "simple"
  3938                           ; Number of cases is 5, Range of values is 1 to 5
  3939                           ; switch strategies available:
  3940                           ; Name         Instructions Cycles
  3941                           ; simple_byte           16     9 (average)
  3942                           ;	Chosen strategy is simple_byte
  3943   000D5C  5005               	movf	??_code_to_alphabet^0,w,c
  3944   000D5E  0A01               	xorlw	1	; case 1
  3945   000D60  B4D8               	btfsc	status,2,c
  3946   000D62  EF43  F005         	goto	i2l1641
  3947   000D66  0A03               	xorlw	3	; case 2
  3948   000D68  B4D8               	btfsc	status,2,c
  3949   000D6A  EF69  F005         	goto	i2l1653
  3950   000D6E  0A01               	xorlw	1	; case 3
  3951   000D70  B4D8               	btfsc	status,2,c
  3952   000D72  EFA7  F005         	goto	i2l1673
  3953   000D76  0A07               	xorlw	7	; case 4
  3954   000D78  B4D8               	btfsc	status,2,c
  3955   000D7A  EF05  F006         	goto	i2l1701
  3956   000D7E  0A01               	xorlw	1	; case 5
  3957   000D80  B4D8               	btfsc	status,2,c
  3958   000D82  EF6B  F006         	goto	i2l1725
  3959   000D86  EFC5  F006         	goto	i2l1731
  3960   000D8A                     i2l1731:
  3961                           
  3962                           ;main.c: 524:     return rc;
  3963   000D8A  5007               	movf	code_to_alphabet@rc^0,w,c
  3964   000D8C  0012               	return		;funcret
  3965   000D8E                     __end_of_code_to_alphabet:
  3966                           	callstack 0
  3967                           
  3968                           	psect	rparam
  3969   000000                     
  3970                           	psect	temp
  3971   000053                     btemp:
  3972                           	callstack 0
  3973   000053                     	ds	1
  3974   000000                     int$flags	set	btemp
  3975   000000                     wtemp8	set	btemp+1
  3976   000000                     ttemp5	set	btemp+1
  3977   000000                     ttemp6	set	btemp+4
  3978   000000                     ttemp7	set	btemp+8
  3979                           
  3980                           	psect	idloc
  3981                           
  3982                           ;Config register IDLOC0 @ 0x200000
  3983                           ;	unspecified, using default values
  3984   200000                     	org	2097152
  3985   200000  FF                 	db	255
  3986                           
  3987                           ;Config register IDLOC1 @ 0x200001
  3988                           ;	unspecified, using default values
  3989   200001                     	org	2097153
  3990   200001  FF                 	db	255
  3991                           
  3992                           ;Config register IDLOC2 @ 0x200002
  3993                           ;	unspecified, using default values
  3994   200002                     	org	2097154
  3995   200002  FF                 	db	255
  3996                           
  3997                           ;Config register IDLOC3 @ 0x200003
  3998                           ;	unspecified, using default values
  3999   200003                     	org	2097155
  4000   200003  FF                 	db	255
  4001                           
  4002                           ;Config register IDLOC4 @ 0x200004
  4003                           ;	unspecified, using default values
  4004   200004                     	org	2097156
  4005   200004  FF                 	db	255
  4006                           
  4007                           ;Config register IDLOC5 @ 0x200005
  4008                           ;	unspecified, using default values
  4009   200005                     	org	2097157
  4010   200005  FF                 	db	255
  4011                           
  4012                           ;Config register IDLOC6 @ 0x200006
  4013                           ;	unspecified, using default values
  4014   200006                     	org	2097158
  4015   200006  FF                 	db	255
  4016                           
  4017                           ;Config register IDLOC7 @ 0x200007
  4018                           ;	unspecified, using default values
  4019   200007                     	org	2097159
  4020   200007  FF                 	db	255
  4021                           
  4022                           	psect	config
  4023                           
  4024                           ; Padding undefined space
  4025   300000                     	org	3145728
  4026   300000  FF                 	db	255
  4027                           
  4028                           ;Config register CONFIG1H @ 0x300001
  4029                           ;	Oscillator Selection bits
  4030                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  4031                           ;	Fail-Safe Clock Monitor Enable bit
  4032                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4033                           ;	Internal/External Oscillator Switchover bit
  4034                           ;	IESO = ON, Oscillator Switchover mode enabled
  4035   300001                     	org	3145729
  4036   300001  88                 	db	136
  4037                           
  4038                           ;Config register CONFIG2L @ 0x300002
  4039                           ;	Power-up Timer Enable bit
  4040                           ;	PWRT = OFF, PWRT disabled
  4041                           ;	Brown-out Reset Enable bits
  4042                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  4043                           ;	Brown Out Reset Voltage bits
  4044                           ;	BORV = 3, Minimum setting
  4045   300002                     	org	3145730
  4046   300002  1F                 	db	31
  4047                           
  4048                           ;Config register CONFIG2H @ 0x300003
  4049                           ;	Watchdog Timer Enable bit
  4050                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4051                           ;	Watchdog Timer Postscale Select bits
  4052                           ;	WDTPS = 1, 1:1
  4053   300003                     	org	3145731
  4054   300003  00                 	db	0
  4055                           
  4056                           ; Padding undefined space
  4057   300004                     	org	3145732
  4058   300004  FF                 	db	255
  4059                           
  4060                           ;Config register CONFIG3H @ 0x300005
  4061                           ;	CCP2 MUX bit
  4062                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  4063                           ;	PORTB A/D Enable bit
  4064                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  4065                           ;	Low-Power Timer1 Oscillator Enable bit
  4066                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4067                           ;	MCLR Pin Enable bit
  4068                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  4069   300005                     	org	3145733
  4070   300005  83                 	db	131
  4071                           
  4072                           ;Config register CONFIG4L @ 0x300006
  4073                           ;	Stack Full/Underflow Reset Enable bit
  4074                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4075                           ;	Single-Supply ICSP Enable bit
  4076                           ;	LVP = OFF, Single-Supply ICSP disabled
  4077                           ;	Extended Instruction Set Enable bit
  4078                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4079                           ;	Background Debugger Enable bit
  4080                           ;	DEBUG = 0x1, unprogrammed default
  4081   300006                     	org	3145734
  4082   300006  81                 	db	129
  4083                           
  4084                           ; Padding undefined space
  4085   300007                     	org	3145735
  4086   300007  FF                 	db	255
  4087                           
  4088                           ;Config register CONFIG5L @ 0x300008
  4089                           ;	Code Protection bit
  4090                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  4091                           ;	Code Protection bit
  4092                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  4093                           ;	Code Protection bit
  4094                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  4095                           ;	Code Protection bit
  4096                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  4097   300008                     	org	3145736
  4098   300008  0F                 	db	15
  4099                           
  4100                           ;Config register CONFIG5H @ 0x300009
  4101                           ;	Boot Block Code Protection bit
  4102                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  4103                           ;	Data EEPROM Code Protection bit
  4104                           ;	CPD = OFF, Data EEPROM not code-protected
  4105   300009                     	org	3145737
  4106   300009  C0                 	db	192
  4107                           
  4108                           ;Config register CONFIG6L @ 0x30000A
  4109                           ;	Write Protection bit
  4110                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  4111                           ;	Write Protection bit
  4112                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  4113                           ;	Write Protection bit
  4114                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  4115                           ;	Write Protection bit
  4116                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  4117   30000A                     	org	3145738
  4118   30000A  0F                 	db	15
  4119                           
  4120                           ;Config register CONFIG6H @ 0x30000B
  4121                           ;	Configuration Register Write Protection bit
  4122                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  4123                           ;	Boot Block Write Protection bit
  4124                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  4125                           ;	Data EEPROM Write Protection bit
  4126                           ;	WRTD = OFF, Data EEPROM not write-protected
  4127   30000B                     	org	3145739
  4128   30000B  E0                 	db	224
  4129                           
  4130                           ;Config register CONFIG7L @ 0x30000C
  4131                           ;	Table Read Protection bit
  4132                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  4133                           ;	Table Read Protection bit
  4134                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  4135                           ;	Table Read Protection bit
  4136                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  4137                           ;	Table Read Protection bit
  4138                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4139   30000C                     	org	3145740
  4140   30000C  0F                 	db	15
  4141                           
  4142                           ;Config register CONFIG7H @ 0x30000D
  4143                           ;	Boot Block Table Read Protection bit
  4144                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4145   30000D                     	org	3145741
  4146   30000D  40                 	db	64
  4147                           tosu	equ	0xFFF
  4148                           tosh	equ	0xFFE
  4149                           tosl	equ	0xFFD
  4150                           stkptr	equ	0xFFC
  4151                           pclatu	equ	0xFFB
  4152                           pclath	equ	0xFFA
  4153                           pcl	equ	0xFF9
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           indf0	equ	0xFEF
  4161                           postinc0	equ	0xFEE
  4162                           postdec0	equ	0xFED
  4163                           preinc0	equ	0xFEC
  4164                           plusw0	equ	0xFEB
  4165                           fsr0h	equ	0xFEA
  4166                           fsr0l	equ	0xFE9
  4167                           wreg	equ	0xFE8
  4168                           indf1	equ	0xFE7
  4169                           postinc1	equ	0xFE6
  4170                           postdec1	equ	0xFE5
  4171                           preinc1	equ	0xFE4
  4172                           plusw1	equ	0xFE3
  4173                           fsr1h	equ	0xFE2
  4174                           fsr1l	equ	0xFE1
  4175                           bsr	equ	0xFE0
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           preinc2	equ	0xFDC
  4180                           plusw2	equ	0xFDB
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8

Data Sizes:
    Strings     47
    Constant    0
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     54      82
    BANK0           128     23      83
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    main@check	PTR unsigned char  size(1) Largest target is 18
		 -> STR_4(CODE[18]), 

    sp__GetString	PTR unsigned char  size(1) Largest target is 20
		 -> mystring(COMRAM[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> str(BANK0[20]), string(BANK0[20]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 20
		 -> str(BANK0[20]), string(BANK0[20]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 20
		 -> str(BANK0[20]), string(BANK0[20]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 20
		 -> mystring(COMRAM[20]), string(BANK0[20]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[10]), STR_2(CODE[10]), STR_3(CODE[5]), STR_4(CODE[18]), 
		 -> STR_5(CODE[4]), string(BANK0[20]), 


Critical Paths under _main in COMRAM

    _strcpy->_GetString
    _output->_bee_led_output
    _bee_led_output->_UART_Write_Text
    _UART_Write_Text->_UART_Write

Critical Paths under _Lo_ISR in COMRAM

    _Lo_ISR->_MyusartRead
    _MyusartRead->i1_ClearBuffer

Critical Paths under _H_ISR in COMRAM

    _H_ISR->_state1_output
    i2_UART_Write_Text->i2_UART_Write
    _state1_output->_code_to_alphabet

Critical Paths under _main in BANK0

    _main->_output
    _output->_bee_led_output
    _bee_led_output->_alphabet_to_code

Critical Paths under _Lo_ISR in BANK0

    None.

Critical Paths under _H_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Lo_ISR in BANK1

    None.

Critical Paths under _H_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Lo_ISR in BANK2

    None.

Critical Paths under _H_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Lo_ISR in BANK3

    None.

Critical Paths under _H_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Lo_ISR in BANK4

    None.

Critical Paths under _H_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Lo_ISR in BANK5

    None.

Critical Paths under _H_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3957
                                             22 BANK0      1     1      0
                        _ClearBuffer
                          _GetString
                 _Get_complete_state
                  _SYSTEM_Initialize
                    _UART_Write_Text
                     _clear_complete
                             _output
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               3     1      2     463
                                             46 COMRAM     3     1      2
                          _GetString (ARG)
 ---------------------------------------------------------------------------------
 (1) _output                                               3     3      0    2730
                                             19 BANK0      3     3      0
                   _alphabet_to_code
                     _bee_led_output
 ---------------------------------------------------------------------------------
 (2) _bee_led_output                                      17    13      4    1086
                                             51 COMRAM     3     3      0
                                              5 BANK0     14    10      4
                         _UART_Write
                    _UART_Write_Text
                   _alphabet_to_code (ARG)
 ---------------------------------------------------------------------------------
 (3) _UART_Write_Text                                      6     4      2     631
                                             45 COMRAM     6     4      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (4) _UART_Write                                           1     1      0      31
                                             44 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _alphabet_to_code                                    11     7      4    1545
                                             44 COMRAM     6     2      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _clear_complete                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
                    _UART_Initialize
 ---------------------------------------------------------------------------------
 (2) _UART_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_complete_state                                   2     0      2       0
                                             44 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetString                                            2     0      2       0
                                             44 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ClearBuffer                                          2     2      0      99
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Lo_ISR                                               7     7      0      90
                                             37 COMRAM     7     7      0
                        _MyusartRead
 ---------------------------------------------------------------------------------
 (6) _MyusartRead                                          1     1      0      90
                                             36 COMRAM     1     1      0
                      i1_ClearBuffer
                       i1_UART_Write
 ---------------------------------------------------------------------------------
 (7) i1_UART_Write                                         1     1      0      22
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i1_ClearBuffer                                        2     2      0      68
                                             34 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _H_ISR                                               18    18      0     909
                                             16 COMRAM    18    18      0
                      _state1_output
                  i2_UART_Write_Text
 ---------------------------------------------------------------------------------
 (9) i2_UART_Write_Text                                    6     4      2     164
                                              1 COMRAM     6     4      2
                       i2_UART_Write
 ---------------------------------------------------------------------------------
 (9) _state1_output                                        9     5      4     556
                                              7 COMRAM     9     5      4
                   _code_to_alphabet
                       i2_UART_Write
 ---------------------------------------------------------------------------------
 (10) i2_UART_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _code_to_alphabet                                    7     3      4     268
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearBuffer
   _GetString
   _Get_complete_state
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _UART_Initialize
   _UART_Write_Text
     _UART_Write
   _clear_complete
   _output
     _alphabet_to_code
     _bee_led_output
       _UART_Write
       _UART_Write_Text
       _alphabet_to_code (ARG)
   _strcpy
     _GetString (ARG)

 _Lo_ISR (ROOT)
   _MyusartRead
     i1_ClearBuffer
     i1_UART_Write

 _H_ISR (ROOT)
   _state1_output
     _code_to_alphabet
     i2_UART_Write
   i2_UART_Write_Text
     i2_UART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F3      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            F4      0       0      13        0.0%
BANK5               F4      0       0      14        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     17      53       4       64.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     36      52       1       65.1%
BITBIGSFR_1llh       B      0       0      24        0.0%
BITBIGSFR_5h         A      0       0      15        0.0%
BITBIGSFR_1lhh       9      0       0      22        0.0%
BITBIGSFR_1lhlh      8      0       0      23        0.0%
BITBIGSFRlh          8      0       0      26        0.0%
BITBIGSFRllh         7      0       0      27        0.0%
BITBIGSFRh           7      0       0      25        0.0%
BITBIGSFR_2          6      0       0      18        0.0%
BITBIGSFR_1hhll      5      0       0      21        0.0%
BITBIGSFR_1hhlh      3      0       0      20        0.0%
BITBIGSFR_4          3      0       0      16        0.0%
BITBIGSFR_3          3      0       0      17        0.0%
BITBIGSFR_1hhh       2      0       0      19        0.0%
BITBIGSFRlll         1      0       0      28        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      29        0.0%
DATA                 0      0      A5      31        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Jan 08 21:16:40 2024

                           l29 14C8                             l56 1422                             l59 14E4  
                           bsr 0FE0                 ?_state1_output 0008               ??_bee_led_output 0034  
                          l102 144C                            l105 1476                            l130 14DC  
                          l114 11E8                            l108 1488                            l133 14D2  
                          l119 1364                            l127 14E8                            l240 1084  
                          l232 1328                            l236 10CC                            l245 0A60  
                          l239 106A                            l282 0A70                            l288 1164  
                          _PR2 0FCB                            u820 1484                            u900 10B6  
                          u821 1480                            u901 10B2                            u910 135C  
                          u830 11A4                            u911 1358                            u840 11D8  
                          u920 1328                            u921 1324                            u850 11E8  
                          u930 13F8                            u851 11E4                            u931 13F4  
                          u860 0FC2                            u940 10F2                            u837 119A  
                          u861 0FBE                            u941 10EE                            u870 0FF6  
                          u950 111E                            u847 11CE                            u871 0FF2  
                          u951 111A                            u890 104C                            u891 1048  
                          u885 1026                            u967 0FCC                            u977 1058  
                          u987 1076                            u997 108E                            _str 0094  
                          wreg 0FE8        state1_output@input_code 0008                           l1029 13F8  
                         l2201 06DA                           l2211 073E                           l2203 06EE  
                         l2221 07A2                           l2213 0752                           l2205 0702  
                         l2141 116C                           l2301 10A2                           l2151 14DE  
                         l2311 1402                           l2231 0806                           l2223 07B6  
                         l2215 0766                           l2207 0716                           l2143 1178  
                         l2303 10A8                           l2161 1434                           l2153 1424  
                         l2321 1416                           l2313 140E                           l2241 086A  
                         l2233 081A                           l2225 07CA                           l2217 077A  
                         l2209 072A                           l2137 1476                           l2145 11A8  
                         l2305 10B6                           l2331 1332                           l2171 1442  
                         l2163 143A                           l2155 1428                           l2323 1420  
                         l2315 1410                           l2251 08CE                           l2243 087E  
                         l2235 082E                           l2227 07DE                           l2219 078E  
                         l2139 1484                           l2147 11AC                           l2333 133C  
                         l2325 132A                           l2149 14B6                           l2173 1444  
                         l2165 143C                           l2157 1430                           l2317 1412  
                         l2309 13FA                           l2253 08E2                           l2245 0892  
                         l2237 0842                           l2229 07F2                           l2261 091E  
                         l2181 0636                           l2335 1340                           l2343 14D4  
                         l2175 1446                           l2167 143E                           l2159 1432  
                         l2319 1414                           l2255 08F6                           l2247 08A6  
                         l2239 0856                           l2191 0676                           l2183 063A  
                         l2271 0FB0                           l2351 1300                           l2337 135C  
                         l2177 1448                           l2169 1440                           l2345 14CA  
                         l2257 090A                           l2249 08BA                           l2193 068A  
                         l2185 0642                           l2281 0FFA                           l2273 0FC2  
                         l2353 130C                           l2361 10CE                           l2339 14E6  
                         l2179 144A                           l2195 069E                           l2187 064E  
                         l2291 104E                           l2283 100A                           l2267 0F96  
                         l2355 1310                           l2347 12D0                           l2371 1100  
                         l2363 10D2                           l2197 06B2                           l2189 0662  
                         l2293 1064                           l2285 1014                           l2277 0FDC  
                         l2269 0FA6                           l2349 12DE                           l2357 13D0  
                         l2381 1154                           l2373 110C                           l2365 10DA  
                         l2527 0932                           l2199 06C6                           l2295 106C  
                         l2287 103A                           l2359 13D4                           l2383 1158  
                         l2375 111E                           l2367 10E0                           l2297 1082  
                         l2289 104C                           l2385 115C                           l2377 1138  
                         l2369 10F2                           l2299 109A                           l2379 1144  
                         STR_1 061D                           STR_2 0613                           STR_3 0627  
                         STR_4 0601                           STR_5 062C                           _CREN 7D5C  
                         u1007 10C0                           _LATA 0F89                           _RCIF 7CF5  
                         _TMR2 0FCC                           _main 10CE                           fsr0h 0FEA  
                         fsr1h 0FE2                           indf0 0FEF                           fsr2h 0FDA  
                         fsr0l 0FE9                           indf1 0FE7                           indf2 0FDF  
                         fsr1l 0FE1                           fsr2l 0FD9                           btemp 0053  
                         start 0090                   ___param_bank 0000        __end_of_UART_Write_Text 11EA  
             ?_UART_Initialize 0001       state1_output@input_count 000A  __end_of_OSCILLATOR_Initialize 14E6  
                        ?_main 0001                          _IRCF0 7E9C                          _IRCF1 7E9D  
                        _IRCF2 7E9E                          i1l105 148C                          i1l108 149E  
                        i1l124 12CE                          i1l141 0078                          i1l119 13A0  
                        i2l105 14A2                          i2l114 1266                          i2l108 14B4  
                        i2l204 0E5C                          i2l213 0ECC                          i2l223 0F72  
                        i2l209 0F60                          i2l218 0F08                          i2l188 13CE  
                        i2l349 0D8C                          i2l199 0E20                          _RCREG 0FAE  
                        _H_ISR 0008                          _SPBRG 0FAF                          _TRISA 0F92  
                        _TXREG 0FAD                    ?_UART_Write 0001                          _state 003D  
                  _ClearBuffer 132A                          tablat 0FF5                          ttemp5 0054  
                        ttemp6 0057                          ttemp7 005B                          status 0FD8  
                        wtemp8 0054                __initialization 144E                   __end_of_main 116C  
           bee_led_output@code 00C9             bee_led_output@mask 00C5                ??_state1_output 000C  
            ?_alphabet_to_code 002D                         ??_main 0037                  __activetblptr 0002  
           ??_alphabet_to_code 0031                         ?_H_ISR 0001                         H_ISR@i 001B  
                       _ADRESH 0FC4                         _ADRESL 0FC3          __end_ofi1_ClearBuffer 13A2  
     __end_of_code_to_alphabet 0D8E                         i1l2001 0054                         i1l2003 0062  
                       i1l2005 0076                         i1l1901 136E                         i1l1903 1378  
                       i1l1905 137C                         i2l2011 0DC0                         i1l1907 1398  
                       i2l2021 0E00                         i2l2013 0DCE                         i1l1941 1274  
                       i2l2031 0E2E                         i2l2023 0E0C                         i2l2015 0DE0  
                       i1l1951 12AE                         i1l1943 1282                         i2l2041 0E7C  
                       i2l2025 0E18                         i2l2033 0E34                         i2l2017 0DF0  
                       i2l2009 0DB0                         i1l1953 12CA                         i1l1945 129C  
                       i2l2051 0E92                         i2l2043 0E80                         i2l2035 0E4E  
                       i2l2027 0E1C                         i2l2019 0DF8                         i1l1947 12A2  
                       i1l1939 1268                         i2l2061 0EC4                         i2l2045 0E82  
                       i2l2037 0E6A                         i2l2029 0E1E                         i1l1949 12AA  
                       i2l2071 0EFA                         i2l2063 0EC8                         i2l2055 0EA8  
                       i2l2047 0E84                         i2l2039 0E6E                         i1l1895 1366  
                       i1l1887 148C                         i2l2081 0F5A                         i2l2073 0F16  
                       i2l2065 0ECA                         i2l2057 0EAC                         i2l2049 0E8E  
                       i1l1889 149A                         i1l1993 002E                         i2l2075 0F1A  
                       i2l2067 0EDA                         i2l2059 0EB8                         i1l1995 003C  
                       i2l1701 0C0A                         i2l2077 0F2E                         i2l2069 0EE0  
                       i1l1997 004A                         i2l1711 0CA6                         i2l1703 0C86  
                       i2l2079 0F46                         i1l1999 0050                         i2l1721 0CCE  
                       i2l1713 0CAE                         i2l1705 0C8E                         i2l1641 0A86  
                       i2l1633 0A72                         i2l1715 0CB6                         i2l1707 0C96  
                       i2l2531 0AE8                         i2l1643 0AB2                         i2l1731 0D8A  
                       i2l1635 0A76                         i2l1717 0CBE                         i2l1709 0C9E  
                       i2l1725 0CD6                         i2l2533 0B64                         i2l1661 0B26  
                       i2l1653 0AD2                         i2l1645 0ABA                         i2l1637 0A7E  
                       i2l1719 0CC6                         i2l2535 0C20                         i2l1663 0B2E  
                       i2l1655 0B0E                         i2l1647 0AC2                         i2l2537 0CEC  
                       i2l1681 0BC2                         i2l1673 0B4E                         i2l1665 0B36  
                       i2l1657 0B16                         i2l1649 0ACA                         i2l2529 0A9C  
                       i2l1729 0D42                         i2l2539 0D5C                         i2l1691 0BEA  
                       i2l1683 0BCA                         i2l1675 0BAA                         i2l1667 0B3E  
                       i2l1659 0B1E                         i2l1693 0BF2                         i2l1685 0BD2  
                       i2l1677 0BB2                         i2l1669 0B46                         i2l1695 0BFA  
                       i2l1687 0BDA                         i2l1679 0BBA                         i2l1697 0C02  
                       i2l1689 0BE2                         i2l1891 14A2                         i2l1893 14B0  
                       i2l1965 13A2                         i2l1967 13B2                         i2l1991 122A  
                       i2l1969 13C8                         i2l1985 11EA                         i2l1987 11F6  
                       i2l1989 1226                         _Lo_ISR 0018             code_to_alphabet@mc 0001  
           code_to_alphabet@rc 0007               ?_UART_Write_Text 002E                         _lenStr 003B  
                       clear_0 1454                         clear_1 1460                         isa$std 0001  
                       _output 12D0                         _strcpy 13D0                         _string 00A8  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8              _SYSTEM_Initialize 13FA                     __accesstop 0080  
      __end_of__initialization 1466             ?_SYSTEM_Initialize 0001                  ___rparam_used 0001  
                __end_of_H_ISR 0F96              __end_of_GetString 14EA                  ?i1_UART_Write 0001  
               __pcstackCOMRAM 0001            ??_SYSTEM_Initialize 002D            bee_led_output@count 00CB  
             bee_led_output@in 00C1                        ??_H_ISR 0011                  ??_MyusartRead 0025  
                ?i2_UART_Write 0001      __end_of_SYSTEM_Initialize 1424                     __pbssBANK0 0080  
               _clear_complete 14CA               i2UART_Write@data 0001                        ?_Lo_ISR 0001  
               ??i1_UART_Write 0023             i2UART_Write_Text@i 0006                    H_ISR@i_1165 001D  
                      ?_output 0001                        ?_strcpy 002F                 state1_output@a 000C  
               ??i2_UART_Write 0001                   ??_UART_Write 002D                        i1u51_20 149A  
                      i1u51_21 1496                        i1u53_20 1398                        i1u53_21 1394  
                      i1u62_20 003C                        i1u62_21 0038                        i1u55_20 129C  
                      i1u63_20 004A                        i1u55_21 1298                        i1u63_21 0046  
                      i1u56_20 12CA                        i1u64_20 0062                        i1u56_21 12C6  
                      i1u64_21 005E                        i2u52_40 14B0                        i2u60_40 1256  
                      i2u52_41 14AC                        i2u60_47 124C                        i2u61_40 1266  
                      i2u61_41 1262                        i2u70_40 0E6A                        i2u70_41 0E66  
                      i2u71_40 0E7C                        i2u71_41 0E78                        i2u72_40 0EA4  
                      i2u72_41 0EA0                        i2u73_40 0EDA                        i2u65_40 0DCE  
                      i2u73_41 0ED6                        i2u65_41 0DCA                        i2u74_40 0EFA  
                      i2u66_40 0DE0                        i2u74_41 0EF6                        i2u66_41 0DDC  
                      i2u59_40 1222                        i2u75_40 0F08                        i2u67_40 0E2E  
                      i2u75_41 0F04                        i2u67_41 0E2A                        i2u59_47 1218  
                      i2u76_40 0F16                        i2u68_40 0E4E                        i2u76_41 0F12  
                      i2u68_41 0E4A                        i2u77_40 0F2E                        i2u69_40 0E5C  
                      i2u77_41 0F2A                        i2u69_41 0E58                        i2u78_40 0F5A  
                      i2u78_41 0F56                        i2u79_40 0F6E                        i2u79_41 0F6A  
                 ?_ClearBuffer 0001         __end_of_clear_complete 14D4            __end_of_MyusartRead 12D0  
                      __Hparam 0000                        __Lparam 0000             __end_of_UART_Write 148A  
                 __psmallconst 0600                        __pcinit 144E                        __ramtop 0600  
                      __ptext0 10CE                        __ptext1 13D0                        __ptext2 12D0  
                      __ptext3 0F96                        __ptext4 116C                        __ptext5 1474  
                      __ptext6 0632                        __ptext7 14CA                        __ptext8 13FA  
                      __ptext9 1424          _OSCILLATOR_Initialize 14DE                      _T2CONbits 0FCA  
               __pintcode_body 0D8E           end_of_initialization 1466                ?_clear_complete 0001  
            ?_code_to_alphabet 0001                  __Lmediumconst 0000                        int_func 0D8E  
           ??_code_to_alphabet 0005                      _RCSTAbits 0FAB                        postdec2 0FDD  
                      postinc0 0FEE                        postinc2 0FDE                        output@i 00D0  
                      strcpy@d 0031          __end_of_state1_output 13D0                      _PORTBbits 0F81  
               UART_Write@data 002D                      _TRISBbits 0F93                      _TRISCbits 0F94  
                  _MyusartRead 1268           __end_ofi1_UART_Write 14A0     __end_of_Get_complete_state 14DE  
                    _TXSTAbits 0FAC                 __end_of_Lo_ISR 0090           __end_ofi2_UART_Write 14B6  
 __end_of_INTERRUPT_Initialize 14CA                      _GetString 14E6                    _BAUDCONbits 0FB8  
       ?_OSCILLATOR_Initialize 0001                 __end_of_output 132A                 __end_of_strcpy 13FA  
          start_initialization 144E           bee_led_output@signal 00C7                   ClearBuffer@i 002D  
            ??_UART_Initialize 002D                       ??_Lo_ISR 0026                     ?_GetString 002D  
                     ??_output 00CF                       ??_strcpy 0031                    __pbssCOMRAM 0037  
            i2_UART_Write_Text 11EA                  __pcstackBANK0 00BC             ?i2_UART_Write_Text 0002  
               _bee_led_output 0F96                bee_led_output@i 00CD               _alphabet_to_code 0632  
                i1_ClearBuffer 1366                 i1ClearBuffer@i 0023          i2UART_Write_Text@text 0002  
          ??i2_UART_Write_Text 0004                      __pintcode 0008                    __pintcodelo 0018  
                   H_ISR@clock 0021      __end_ofi2_UART_Write_Text 1268                    __smallconst 0600  
             ??_clear_complete 002D         __end_of_bee_led_output 10CE                 ?i1_ClearBuffer 0001  
              state1_output@mc 000D              ??_UART_Write_Text 0030           _INTERRUPT_Initialize 14B6  
                     _LATAbits 0F89                       _IPR1bits 0F9F                       _PIE1bits 0F9D  
                     _PIR1bits 0F9E                   i1_UART_Write 148A                       _RCONbits 0FD0  
                  ??_GetString 002F                     _ADCON0bits 0FC2                      main@check 00D2  
                 _input_string 0080                   ?_MyusartRead 0001                ?_bee_led_output 00C1  
                 i2_UART_Write 14A0                    _INTCON2bits 0FF1                    _INTCON3bits 0FF0  
        ?_INTERRUPT_Initialize 0001               i1UART_Write@data 0023                       __Hrparam 0000  
                     __Lrparam 0000             alphabet_to_code@rv 00BD        ??_OSCILLATOR_Initialize 002D  
           _Get_complete_state 14D4                _UART_Initialize 1424            ?_Get_complete_state 002D  
              ??i1_ClearBuffer 0023                       __ptext10 14DE                       __ptext11 14B6  
                     __ptext20 11EA                       __ptext12 14D4                       __ptext21 13A2  
                     __ptext13 14E6                       __ptext22 14A0                       __ptext14 132A  
                     __ptext23 0A72                       __ptext16 1268                       __ptext17 148A  
                     __ptext18 1366                       _complete 0037                     strcpy@dest 002F  
             H_ISR@input_count 0019            UART_Write_Text@text 002E           ??_Get_complete_state 002F  
                     isa$xinst 0000                       int$flags 0053       __end_of_alphabet_to_code 0A72  
                     _mystring 003F                     _INTCONbits 0FF2         ??_INTERRUPT_Initialize 002D  
            alphabet_to_code@c 00BC                  ??_ClearBuffer 002D                       intlevel1 0000  
                     intlevel2 0000                      strcpy@src 0030                H_ISR@input_code 001F  
                   _OSCCONbits 0FD3        __end_of_UART_Initialize 144E               _code_to_alphabet 0A72  
                _state1_output 13A2                _UART_Write_Text 116C                     _UART_Write 1474  
             UART_Write_Text@i 0032            __end_of_ClearBuffer 1366                 _input_complete 0039  
